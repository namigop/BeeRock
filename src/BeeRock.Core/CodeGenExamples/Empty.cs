//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"

namespace MyNamespace
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public interface IController
    {

        /// <summary>
        /// Upload the CSV file for bulk refund request
        /// </summary>

        /// <remarks>
        /// This API retrieves bulk refund request from the uploaded csv file
        /// </remarks>

        /// <param name="request_Id">Request ID</param>

        /// <param name="cookie">Paste kirk/cms-ui cookie here</param>

        /// <param name="version">Version</param>

        /// <param name="country">Country</param>

        /// <param name="locale">Locale</param>

        /// <param name="tenant">Tenant</param>

        /// <param name="template_version">optional - if empty gets the latest version</param>

        /// <returns>OK</returns>

        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.FileContentResult> MValidateAsync48(string request_Id, string cookie, string version, string country, string locale, string tenant, string template_version);

        /// <summary>
        /// Initiate the bulk refund request
        /// </summary>

        /// <remarks>
        /// This API initiates the bulk refund request
        /// </remarks>

        /// <param name="request_Id">Request ID</param>

        /// <param name="cookie">Paste kirk/cms-ui cookie here</param>

        /// <param name="version">Version</param>

        /// <param name="country">Country</param>

        /// <param name="locale">Locale</param>

        /// <param name="tenant">Tenant</param>

        /// <param name="file_id">file_id</param>

        /// <param name="reason">reason</param>

        /// <returns>OK</returns>

        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.FileContentResult> MStatusGETAsync76(string request_Id, string cookie, string version, string country, string locale, string tenant, string file_id, string reason);

        /// <summary>
        /// check the health of the service
        /// </summary>

        /// <remarks>
        /// This API will read a config value and display the result.
        /// </remarks>

        /// <returns>OK</returns>

        System.Threading.Tasks.Task<HealthStatus> MHealthAsync88();

        /// <summary>
        /// check the db-health of the service
        /// </summary>

        /// <remarks>
        /// This API will ping the db and returns the result.
        /// </remarks>

        /// <returns>OK</returns>

        System.Threading.Tasks.Task<HealthStatus> MDbAsync100();

        /// <summary>
        /// debit from users card
        /// </summary>

        /// <remarks>
        /// This API will debit the amount from users card for the given userId
        /// </remarks>

        /// <param name="x_AUTH">Auth Token</param>

        /// <param name="payload">Request payload</param>

        /// <param name="country">Country</param>

        /// <param name="locale">Locale</param>

        /// <param name="tenant">Tenant</param>

        /// <param name="model_req_PaymentDebitReq_UserId">enter user_id</param>

        /// <param name="model_req_PaymentDebitReq_Channel">enter channel</param>

        /// <param name="model_req_PaymentDebitReq_Currency">enter currency</param>

        /// <param name="model_req_PaymentDebitReq_Amount">enter amount</param>

        /// <param name="model_req_PaymentDebitReq_TxnID">enter txn_id</param>

        /// <param name="model_req_PaymentDebitReq_CallbackUrl">enter callback_url</param>

        /// <param name="model_req_PaymentDebitReq_TransactionCategory">enter transaction_category</param>

        /// <param name="model_req_PaymentDebitReq_Description">enter description</param>

        /// <param name="model_req_PaymentDebitReq_RedirectUrl">enter redirect_url</param>

        /// <returns>OK</returns>

        [System.Obsolete]

        System.Threading.Tasks.Task<Response> MDebitAsync142(string x_AUTH, PaymentDebitReq payload, string country, string locale, string tenant, string model_req_PaymentDebitReq_UserId, string model_req_PaymentDebitReq_Channel, string model_req_PaymentDebitReq_Currency, string model_req_PaymentDebitReq_Amount, string model_req_PaymentDebitReq_TxnID, string model_req_PaymentDebitReq_CallbackUrl, string model_req_PaymentDebitReq_TransactionCategory, string model_req_PaymentDebitReq_Description, string model_req_PaymentDebitReq_RedirectUrl);

        /// <summary>
        /// fetch the transaction status
        /// </summary>

        /// <remarks>
        /// This API will return the transaction status for the given txnId
        /// </remarks>

        /// <param name="txn_id">Txn ID</param>

        /// <param name="country">Country</param>

        /// <param name="locale">Locale</param>

        /// <param name="tenant">Tenant</param>

        /// <returns>OK</returns>

        [System.Obsolete]

        System.Threading.Tasks.Task<Response> MStatusGET2Async164(string txn_id, string country, string locale, string tenant);

        /// <summary>
        /// create the payment instrument
        /// </summary>

        /// <remarks>
        /// This API will create a payment instrument for the given userId if the payment instrument already exists in old PAAS system
        /// </remarks>

        /// <param name="x_AUTH">Auth Token</param>

        /// <param name="country">Country</param>

        /// <param name="locale">Locale</param>

        /// <param name="tenant">Tenant</param>

        /// <param name="payload">Request payload</param>

        /// <param name="model_req_PaymentInstrumentsCreateReq_UserId">enter user_id</param>

        /// <param name="model_req_PaymentInstrumentsCreateReq_Channel">enter channel</param>

        /// <returns>OK</returns>

        [System.Obsolete]

        System.Threading.Tasks.Task<Response> MCreateAsync192(string x_AUTH, string country, string locale, string tenant, PaymentInstrumentsCreateReq payload, string model_req_PaymentInstrumentsCreateReq_UserId, string model_req_PaymentInstrumentsCreateReq_Channel);

        /// <summary>
        /// upsert the payment instrument
        /// </summary>

        /// <remarks>
        /// This API will upsert a payment instrument for the given userId
        /// </remarks>

        /// <param name="country">Country</param>

        /// <param name="locale">Locale</param>

        /// <param name="tenant">Tenant</param>

        /// <param name="payload">Request payload</param>

        /// <returns>OK</returns>

        [System.Obsolete]

        System.Threading.Tasks.Task<Response> MUpdateAsync214(string country, string locale, string tenant, PaymentInstrumentsUpdateReq payload);

        /// <summary>
        /// Processes payment status report from the payment gateway
        /// </summary>

        /// <remarks>
        /// This API will do the post processing based on the status report received from Payment Gateway.
        /// </remarks>

        /// <param name="payload">Request payload</param>

        /// <param name="country">Country</param>

        /// <param name="locale">Locale</param>

        /// <param name="gateway">Gateway</param>

        /// <returns>OK</returns>

        [System.Obsolete]

        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, string>> MNotificationAsync236(PaymentGatewayStatusReq payload, string country, string locale, string gateway);

        /// <summary>
        /// debit from users card
        /// </summary>

        /// <remarks>
        /// This API will debit the amount from users card for the given userId using either recurrent token method of drop-in upfront payment method
        /// </remarks>

        /// <param name="x_AUTH">Auth Token</param>

        /// <param name="payload">Request payload</param>

        /// <param name="country">Country</param>

        /// <param name="locale">Locale</param>

        /// <param name="tenant">Tenant</param>

        /// <param name="model_req_PaymentDebitReq_UserId">enter user_id</param>

        /// <param name="model_req_PaymentDebitReq_Channel">enter channel</param>

        /// <param name="model_req_PaymentDebitReq_Currency">enter currency</param>

        /// <param name="model_req_PaymentDebitReq_Amount">enter amount</param>

        /// <param name="model_req_PaymentDebitReq_TxnID">enter txn_id</param>

        /// <param name="model_req_PaymentDebitReq_CallbackUrl">enter callback_url</param>

        /// <param name="model_req_PaymentDebitReq_TransactionCategory">enter transaction_category</param>

        /// <param name="model_req_PaymentDebitReq_Description">enter description</param>

        /// <param name="model_req_PaymentDebitReq_RedirectUrl">enter redirect_url</param>

        /// <returns>OK</returns>

        [System.Obsolete]

        System.Threading.Tasks.Task<Response> MDebit2Async278(string x_AUTH, PaymentDebitReq payload, string country, string locale, string tenant, string model_req_PaymentDebitReq_UserId, string model_req_PaymentDebitReq_Channel, string model_req_PaymentDebitReq_Currency, string model_req_PaymentDebitReq_Amount, string model_req_PaymentDebitReq_TxnID, string model_req_PaymentDebitReq_CallbackUrl, string model_req_PaymentDebitReq_TransactionCategory, string model_req_PaymentDebitReq_Description, string model_req_PaymentDebitReq_RedirectUrl);

        /// <summary>
        /// fetch the meta key values for the given payment reference id
        /// </summary>

        /// <remarks>
        /// This API will fetch the meta key values for the given payment reference id and also for the given meta key
        /// </remarks>

        /// <param name="x_AUTH">Auth Token</param>

        /// <param name="payment_reference_id">Payment Reference Id</param>

        /// <param name="meta_keyPath">Meta Key</param>

        /// <param name="country">Country</param>

        /// <param name="locale">Locale</param>

        /// <param name="tenant">Tenant</param>

        /// <param name="meta_keyQuery">Metadata Key</param>

        /// <returns>OK</returns>

        [System.Obsolete]

        System.Threading.Tasks.Task<Response> MMetaAsync306(string x_AUTH, string payment_reference_id, string meta_keyPath, string country, string locale, string tenant, string meta_keyQuery);

        /// <summary>
        /// process the payment method and make payment
        /// </summary>

        /// <remarks>
        /// This API will debit the amount from users card for the given userId using upfront payment method
        /// </remarks>

        /// <param name="x_AUTH">Auth Token</param>

        /// <param name="payload">Request payload</param>

        /// <param name="country">Country</param>

        /// <param name="locale">Locale</param>

        /// <param name="tenant">Tenant</param>

        /// <returns>OK</returns>

        [System.Obsolete]

        System.Threading.Tasks.Task<Response> MProcessAsync330(string x_AUTH, PaymentProcessReq payload, string country, string locale, string tenant);

        /// <summary>
        /// Get payment information from bssmw
        /// </summary>

        /// <remarks>
        /// This API will return the list of transaction from bssmw
        /// </remarks>

        /// <param name="country">Country</param>

        /// <param name="locale">Locale</param>

        /// <param name="tenant">Tenant</param>

        /// <param name="identifier">Identifier eg. LW12345678</param>

        /// <returns>OK</returns>

        [System.Obsolete]

        System.Threading.Tasks.Task<LoadCustomerPaymentInfoResponse> MGetAsync352(string country, string locale, string tenant, string identifier);

        /// <summary>
        /// Get payment instrument details
        /// </summary>

        /// <remarks>
        /// This API will return the payment instrument details
        /// </remarks>

        /// <param name="country">Country</param>

        /// <param name="locale">Locale</param>

        /// <param name="tenant">Tenant</param>

        /// <param name="sSearchStr">sSearchStr eg, LW123234404</param>

        /// <param name="sSearchType">sSearchType eg, customer_account_number</param>

        /// <returns>OK</returns>

        [System.Obsolete]

        System.Threading.Tasks.Task<PaymentStatusResponse> MDetailsAsync376(string country, string locale, string tenant, string sSearchStr, string sSearchType);

        /// <summary>
        /// Get payment instrument list
        /// </summary>

        /// <remarks>
        /// This API will return the payment instrument list
        /// </remarks>

        /// <param name="country">Country</param>

        /// <param name="locale">Locale</param>

        /// <param name="tenant">Tenant</param>

        /// <param name="sSearchStr">SearchStr eg, LW123234404</param>

        /// <param name="sSearchType">SearchType eg, customer_account_number</param>

        /// <param name="iLimit">iLimit</param>

        /// <param name="iDisplayLength">iDisplayLength</param>

        /// <param name="iDisplayStart">iDisplayStart</param>

        /// <param name="iOffset">iOffset</param>

        /// <returns>OK</returns>

        [System.Obsolete]

        System.Threading.Tasks.Task<PaymentStatusResponse> MListAsync408(string country, string locale, string tenant, string sSearchStr, string sSearchType, string iLimit, string iDisplayLength, string iDisplayStart, string iOffset);

        /// <summary>
        /// Get payment transaction list matched with params
        /// </summary>

        /// <remarks>
        /// This API will return the list of transaction matched with filter criteria
        /// </remarks>

        /// <param name="country">Country</param>

        /// <param name="locale">Locale</param>

        /// <param name="tenant">Tenant</param>

        /// <param name="sSearchType">Search Type eg. payment_reference_id, customer_account_number, etc.</param>

        /// <param name="sSearchStr">Search String</param>

        /// <param name="searchField">Search Field eg. payment_reference_id, customer_account_number, etc.</param>

        /// <param name="searchText">Search String</param>

        /// <param name="sType">Type of transaction eg. UPFRONT, RECURRENT</param>

        /// <param name="sGateway">Gateway eg. adyen, stripe, xendit, midtrans, gmo, etc.</param>

        /// <param name="sStatus">Transaction Status, eg. PENDING, SUCCESS, FAILURE, etc.</param>

        /// <param name="sCardLastFour">Last 4 digit of the card.</param>

        /// <param name="sCardFirstSix">Card bin</param>

        /// <param name="sPaymentReferenceId">Payment reference ID</param>

        /// <param name="sPspReference">Payment Gateway reference</param>

        /// <param name="iLimit">Limit, by default 10 // Vulcan Support</param>

        /// <param name="iDisplayLength">Display length by default 10 // SSR Support</param>

        /// <param name="iOffset">Offset by default 0 // vulcan support</param>

        /// <param name="iDisplayStart">Offset by default 0 // SSR Support</param>

        /// <returns>OK</returns>

        [System.Obsolete]

        System.Threading.Tasks.Task<TransactionListResponse> MList2Async458(string country, string locale, string tenant, string sSearchType, string sSearchStr, string searchField, string searchText, string sType, string sGateway, string sStatus, string sCardLastFour, string sCardFirstSix, string sPaymentReferenceId, string sPspReference, string iLimit, string iDisplayLength, string iOffset, string iDisplayStart);

        /// <summary>
        /// Get payment status api
        /// </summary>

        /// <remarks>
        /// This API will return the status of transaction
        /// </remarks>

        /// <param name="country">Country</param>

        /// <param name="locale">Locale</param>

        /// <param name="tenant">Tenant</param>

        /// <param name="order_ref">Ecom Order ref</param>

        /// <param name="externalId">External identifier eg, order_ref or uuid</param>

        /// <param name="txn_id">External identifier eg, order_ref or uuid</param>

        /// <returns>OK</returns>

        [System.Obsolete]

        System.Threading.Tasks.Task<PaymentStatusResponse> MStatusGET3Async484(string country, string locale, string tenant, string order_ref, string externalId, string txn_id);

        /// <summary>
        /// get the latitude status
        /// </summary>

        /// <remarks>
        /// get the latitude status
        /// </remarks>

        /// <param name="country">Country</param>

        /// <param name="locale">Locale</param>

        /// <param name="tenant">Tenant</param>

        /// <param name="latitudeVerificationRequest">Payload</param>

        /// <returns>OK</returns>

        [System.Obsolete]

        System.Threading.Tasks.Task<GenericProviderServiceResponse> MStatusPOSTAsync506(string country, string locale, string tenant, LatitudeVerificationRequest latitudeVerificationRequest);

        /// <summary>
        /// get the payment upfront
        /// </summary>

        /// <remarks>
        /// get the payment upfront details
        /// </remarks>

        /// <param name="country">Country</param>

        /// <param name="locale">Locale</param>

        /// <param name="tenant">Tenant</param>

        /// <param name="paymentRequest">Payload</param>

        /// <returns>OK</returns>

        [System.Obsolete]

        System.Threading.Tasks.Task<PaymentRequestResponse> MUpfrontAsync528(string country, string locale, string tenant, AsyncPaymentRequest paymentRequest);

        /// <summary>
        /// Get payment instrument details
        /// </summary>

        /// <remarks>
        /// This API will return the payment instrument details
        /// </remarks>

        /// <param name="version">Version</param>

        /// <param name="country">Country</param>

        /// <param name="locale">Locale</param>

        /// <param name="tenant">Tenant</param>

        /// <param name="sSearchStr">sSearchStr eg, LW123234404</param>

        /// <param name="sSearchType">sSearchType eg, customer_account_number</param>

        /// <returns>OK</returns>

        System.Threading.Tasks.Task<Response2> MDetails2Async552(string version, string country, string locale, string tenant, string sSearchStr, string sSearchType);

        /// <summary>
        /// Get payment instrument list
        /// </summary>

        /// <remarks>
        /// This API will return the payment instrument list
        /// </remarks>

        /// <param name="version">Version</param>

        /// <param name="country">Country</param>

        /// <param name="locale">Locale</param>

        /// <param name="tenant">Tenant</param>

        /// <param name="sSearchStr">SearchStr eg, LW123234404</param>

        /// <param name="sSearchType">SearchType eg, customer_account_number</param>

        /// <param name="iLimit">iLimit</param>

        /// <param name="iDisplayLength">iDisplayLength</param>

        /// <param name="iDisplayStart">iDisplayStart</param>

        /// <param name="iOffset">iOffset</param>

        /// <returns>OK</returns>

        System.Threading.Tasks.Task<Response3> MList3Async584(string version, string country, string locale, string tenant, string sSearchStr, string sSearchType, string iLimit, string iDisplayLength, string iDisplayStart, string iOffset);

        /// <summary>
        /// Sends Card Expired notification to users whose card expires between the start and end month.
        /// </summary>

        /// <remarks>
        /// Sends Card Expired notification to users whose card expires between the start and end month.
        /// </remarks>

        /// <param name="version">Version</param>

        /// <param name="country">Country</param>

        /// <param name="locale">Locale</param>

        /// <param name="tenant">Tenant</param>

        /// <param name="reminder_schedule">credit_card_expiry_reminder_1</param>

        /// <returns>OK</returns>

        System.Threading.Tasks.Task MNotifyExpiryAsync606(string version, string country, string locale, string tenant, string reminder_schedule);

        /// <summary>
        /// get refund status
        /// </summary>

        /// <remarks>
        /// This API returns a list of refund based on query filters
        /// </remarks>

        /// <param name="request_Id">Request ID</param>

        /// <param name="version">Version</param>

        /// <param name="country">Country</param>

        /// <param name="locale">Locale</param>

        /// <param name="tenant">Tenant</param>

        /// <param name="fromDate">From Date</param>

        /// <param name="toDate">To Date</param>

        /// <param name="offset">Offset</param>

        /// <param name="pageSize">Page size</param>

        /// <param name="key">Key</param>

        /// <param name="value">Value</param>

        /// <param name="status">Status</param>

        /// <returns>OK</returns>

        System.Threading.Tasks.Task<RefundListResponse> MRefundsAsync642(string request_Id, string version, string country, string locale, string tenant, string fromDate, string toDate, string offset, string pageSize, string key, string value, string status);

        /// <summary>
        /// get specification
        /// </summary>

        /// <remarks>
        /// This API will process to get specification details
        /// </remarks>

        /// <param name="request_Id">Request ID</param>

        /// <param name="version">Version</param>

        /// <param name="country">Country</param>

        /// <param name="tenant">Tenant</param>

        /// <param name="locale">Locale</param>

        /// <param name="configKey">configKey eg, upfront</param>

        /// <returns>OK</returns>

        System.Threading.Tasks.Task<GetSpecResp> MSpecificationGETAsync666(string request_Id, string version, string country, string tenant, string locale, string configKey);

        /// <summary>
        /// update specification
        /// </summary>

        /// <remarks>
        /// This API will process to update specification
        /// </remarks>

        /// <param name="request_Id">Request ID</param>

        /// <param name="version">Version</param>

        /// <param name="country">Country</param>

        /// <param name="tenant">Tenant</param>

        /// <param name="locale">Locale</param>

        /// <param name="req">Payload</param>

        /// <returns>OK</returns>

        System.Threading.Tasks.Task<UpdateSpecResp> MSpecificationPUTAsync690(string request_Id, string version, string country, string tenant, string locale, Req req);

        /// <summary>
        /// add specification
        /// </summary>

        /// <remarks>
        /// This API will process to add specification
        /// </remarks>

        /// <param name="request_Id">Request ID</param>

        /// <param name="version">Version</param>

        /// <param name="country">Country</param>

        /// <param name="tenant">Tenant</param>

        /// <param name="locale">Locale</param>

        /// <param name="req">Payload</param>

        /// <returns>OK</returns>

        System.Threading.Tasks.Task<AddSpecResp> MSpecificationPOSTAsync714(string request_Id, string version, string country, string tenant, string locale, Req2 req);

        /// <summary>
        /// delete specification
        /// </summary>

        /// <remarks>
        /// This API will process to delete specification
        /// </remarks>

        /// <param name="request_Id">Request ID</param>

        /// <param name="version">Version</param>

        /// <param name="country">Country</param>

        /// <param name="tenant">Tenant</param>

        /// <param name="locale">Locale</param>

        /// <param name="configKey">configKey eg, upfront</param>

        /// <returns>OK</returns>

        System.Threading.Tasks.Task<DeleteSpecResp> MSpecificationDELETEAsync738(string request_Id, string version, string country, string tenant, string locale, string configKey);

        /// <summary>
        /// Get payment transaction list matched with params
        /// </summary>

        /// <remarks>
        /// This API will return the list of transaction matched with filter criteria
        /// </remarks>

        /// <param name="version">Version</param>

        /// <param name="country">Country</param>

        /// <param name="locale">Locale</param>

        /// <param name="tenant">Tenant</param>

        /// <param name="sSearchType">Search Type eg. payment_reference_id, customer_account_number, etc.</param>

        /// <param name="sSearchStr">Search String</param>

        /// <param name="searchField">Search Field eg. payment_reference_id, customer_account_number, etc.</param>

        /// <param name="searchText">Search String</param>

        /// <param name="sType">Type of transaction eg. UPFRONT, RECURRENT</param>

        /// <param name="sGateway">Gateway eg. adyen, stripe, xendit, midtrans, gmo, etc.</param>

        /// <param name="sStatus">Transaction Status, eg. PENDING, SUCCESS, FAILURE, etc.</param>

        /// <param name="sCardLastFour">Last 4 digit of the card.</param>

        /// <param name="sCardFirstSix">Card bin</param>

        /// <param name="sPaymentReferenceId">Payment reference ID</param>

        /// <param name="iLimit">Limit, by default 10 // Vulcan Support</param>

        /// <param name="iDisplayLength">Display length by default 10 // SSR Support</param>

        /// <param name="iOffset">Offset by default 0 // vulcan support</param>

        /// <param name="iDisplayStart">Offset by default 0 // SSR Support</param>

        /// <returns>OK</returns>

        System.Threading.Tasks.Task<Response4> MList4Async786(string version, string country, string locale, string tenant, string sSearchType, string sSearchStr, string searchField, string searchText, string sType, string sGateway, string sStatus, string sCardLastFour, string sCardFirstSix, string sPaymentReferenceId, string iLimit, string iDisplayLength, string iOffset, string iDisplayStart);

        /// <summary>
        /// get paylink information
        /// </summary>

        /// <remarks>
        /// This API will fetch the paylink related information
        /// </remarks>

        /// <param name="request_Id">Request ID</param>

        /// <param name="version">Version</param>

        /// <param name="country">Country</param>

        /// <param name="tenant">Tenant</param>

        /// <param name="locale">Locale</param>

        /// <param name="paylink_id">paylinkId</param>

        /// <returns>OK</returns>

        System.Threading.Tasks.Task<GetPaylinkInfoResponse> MPaylinkGETAsync810(string request_Id, string version, string country, string tenant, string locale, string paylink_id);

        /// <summary>
        /// update credit card
        /// </summary>

        /// <remarks>
        /// end point which web-front/mobile call to initiate cc update
        /// </remarks>

        /// <param name="request_Id">Request ID</param>

        /// <param name="version">Version</param>

        /// <param name="country">Country</param>

        /// <param name="locale">Locale</param>

        /// <param name="tenant">Tenant</param>

        /// <param name="paymentRequest">Payload</param>

        /// <returns>OK</returns>

        System.Threading.Tasks.Task<UpfrontPaymentResponse> MSaveAndGetCardDetailsAsync834(string request_Id, string version, string country, string locale, string tenant, SaveAndUpdateCardRequest paymentRequest);

        /// <summary>
        /// get paylink specification
        /// </summary>

        /// <remarks>
        /// TThis API will process to get paylink specification details
        /// </remarks>

        /// <param name="request_Id">Request ID</param>

        /// <param name="version">Version</param>

        /// <param name="country">Country</param>

        /// <param name="tenant">Tenant</param>

        /// <param name="locale">Locale</param>

        /// <returns>OK</returns>

        System.Threading.Tasks.Task<GetPaylinkSpecificationResponse> MPaylinkGET2Async856(string request_Id, string version, string country, string tenant, string locale);

        /// <summary>
        /// update paylink specifications
        /// </summary>

        /// <remarks>
        /// This API will add new entry to paylink specification table with new version
        /// </remarks>

        /// <param name="request_Id">Request ID</param>

        /// <param name="version">Version</param>

        /// <param name="country">Country</param>

        /// <param name="tenant">Tenant</param>

        /// <param name="locale">Locale</param>

        /// <param name="payload">Payload</param>

        /// <returns>OK</returns>

        System.Threading.Tasks.Task<UpdatePaylinkSpecificationResponse> MPaylinkPOSTAsync880(string request_Id, string version, string country, string tenant, string locale, UpdatePaylinkSpecificationRequest payload);

        /// <summary>
        /// view audits
        /// </summary>

        /// <remarks>
        /// This API will return the audit logs of transaction filtered by user
        /// </remarks>

        /// <param name="version">Version</param>

        /// <param name="country">Country</param>

        /// <param name="locale">Locale</param>

        /// <param name="tenant">Tenant</param>

        /// <param name="userId">User Id</param>

        /// <returns>OK</returns>

        System.Threading.Tasks.Task<Response5> MList5Async902(string version, string country, string locale, string tenant, string userId);

        /// <summary>
        /// Get bulk refund csv template by version
        /// </summary>

        /// <remarks>
        /// This API retrives template for bulk refund in csv format. version is optional
        /// </remarks>

        /// <param name="request_Id">Request ID</param>

        /// <param name="cookie">Paste kirk/cms-ui cookie here</param>

        /// <param name="version">Version</param>

        /// <param name="country">Country</param>

        /// <param name="locale">Locale</param>

        /// <param name="tenant">Tenant</param>

        /// <param name="template_version">optional - if empty gets the latest version</param>

        /// <returns>OK</returns>

        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.FileContentResult> MTemplateAsync928(string request_Id, string cookie, string version, string country, string locale, string tenant, string template_version);

        /// <summary>
        /// get payment status
        /// </summary>

        /// <remarks>
        /// This API returns the status of a payment transaction
        /// </remarks>

        /// <param name="request_Id">Request ID</param>

        /// <param name="version">Version</param>

        /// <param name="country">Country</param>

        /// <param name="locale">Locale</param>

        /// <param name="tenant">Tenant</param>

        /// <param name="order_ref">Ecom Order ref</param>

        /// <returns>OK</returns>

        System.Threading.Tasks.Task<PaymentStatusResponse2> MStatusGET4Async952(string request_Id, string version, string country, string locale, string tenant, string order_ref);

        /// <summary>
        /// Get refundable details of a transaction by transaction id
        /// </summary>

        /// <remarks>
        /// This API retrives refundable details of a transaction by transaction id
        /// </remarks>

        /// <param name="request_Id">Request ID</param>

        /// <param name="cookie">Paste kirk/cms-ui cookie here</param>

        /// <param name="version">Version</param>

        /// <param name="country">Country</param>

        /// <param name="locale">Locale</param>

        /// <param name="tenant">Tenant</param>

        /// <param name="transactionId">Transaction Id</param>

        /// <returns>OK</returns>

        System.Threading.Tasks.Task<RefundableDeatilsResponse> MRefundGETAsync978(string request_Id, string cookie, string version, string country, string locale, string tenant, string transactionId);

        /// <summary>
        /// process refund transaction
        /// </summary>

        /// <remarks>
        /// This API processes refund of an existing transaction and return refund transaction id
        /// </remarks>

        /// <param name="request_Id">Request ID</param>

        /// <param name="cookie">Paste kirk/cms-ui cookie here</param>

        /// <param name="version">Version</param>

        /// <param name="country">Country</param>

        /// <param name="locale">Locale</param>

        /// <param name="tenant">Tenant</param>

        /// <param name="payload">Payload</param>

        /// <returns>OK</returns>

        System.Threading.Tasks.Task<RefundTransactionResponse> MRefundPOSTAsync1004(string request_Id, string cookie, string version, string country, string locale, string tenant, ProcessRefundTransactionRequest payload);

        /// <summary>
        /// Get all transactions
        /// </summary>

        /// <remarks>
        /// This API will return the list of transaction matched with filter criteria
        /// </remarks>

        /// <param name="version">Version</param>

        /// <param name="country">Country</param>

        /// <param name="locale">Locale</param>

        /// <param name="tenant">Tenant</param>

        /// <param name="userId">User Id</param>

        /// <param name="customerType">Customer Type</param>

        /// <param name="serviceInstanceNumber">Service Instance Number</param>

        /// <param name="paymentReferenceNumber">Payment Reference Number</param>

        /// <param name="intId">Init ID</param>

        /// <param name="uUID">UUID</param>

        /// <param name="startDate">Transaction create date starting from</param>

        /// <param name="endDate">Transaction create date until to</param>

        /// <param name="transactionType">Type of Transaction eg. payment, refund</param>

        /// <param name="status">Transaction Status eg. PENDING, SUCCESS, FAILURE, etc.</param>

        /// <param name="page">Pagination - page number</param>

        /// <param name="pgeSize">Pagination - size of the page</param>

        /// <returns>OK</returns>

        System.Threading.Tasks.Task<Response6> MTransactionsAsync1048(string version, string country, string locale, string tenant, string userId, string customerType, string serviceInstanceNumber, string paymentReferenceNumber, string intId, string uUID, string startDate, string endDate, string transactionType, string status, string page, string pgeSize);

        /// <summary>
        /// Iniates the transactions report processing
        /// </summary>

        /// <remarks>
        /// This API is used to iniate the transaction report generation and send the file id
        /// </remarks>

        /// <param name="version">Version</param>

        /// <param name="country">Country</param>

        /// <param name="locale">Locale</param>

        /// <param name="tenant">Tenant</param>

        /// <param name="customer_id">Customer ID</param>

        /// <param name="customer_type">Customer Type</param>

        /// <param name="service_instance_number">Service Instance Number</param>

        /// <param name="payment_reference_number">Payment Reference Number</param>

        /// <param name="int_id">Int ID</param>

        /// <param name="uuid">UUID</param>

        /// <param name="start_date">Start Date YYYY-MM-DD</param>

        /// <param name="end_date">End Date YYYY-MM-DD</param>

        /// <param name="transaction_type">Transaction Type</param>

        /// <param name="status">Status</param>

        /// <returns>OK</returns>

        System.Threading.Tasks.Task<Response7> MGenerateAsync1088(string version, string country, string locale, string tenant, string customer_id, string customer_type, string service_instance_number, string payment_reference_number, string int_id, string uuid, string start_date, string end_date, string transaction_type, string status);

        /// <summary>
        /// Download transaction report generated
        /// </summary>

        /// <remarks>
        /// This API is used to download the transaction report generated
        /// </remarks>

        /// <param name="version">Version</param>

        /// <param name="country">Country</param>

        /// <param name="locale">Locale</param>

        /// <param name="tenant">Tenant</param>

        /// <param name="file_id">File Id</param>

        /// <returns>OK</returns>

        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.FileContentResult> MDownloadAsync1110(string version, string country, string locale, string tenant, string file_id);

        /// <summary>
        /// Checks transaction status
        /// </summary>

        /// <remarks>
        /// This API is used to check the status of a transaction report
        /// </remarks>

        /// <param name="version">Version</param>

        /// <param name="country">Country</param>

        /// <param name="locale">Locale</param>

        /// <param name="tenant">Tenant</param>

        /// <param name="file_id">file_id</param>

        /// <returns>OK</returns>

        System.Threading.Tasks.Task<Response8> MStatusGET5Async1132(string version, string country, string locale, string tenant, string file_id);

        /// <summary>
        /// generates paylink
        /// </summary>

        /// <remarks>
        /// This API will generate paylink for outstanding bills
        /// </remarks>

        /// <param name="request_Id">Request ID</param>

        /// <param name="version">Version</param>

        /// <param name="country">Country</param>

        /// <param name="tenant">Tenant</param>

        /// <param name="locale">Locale</param>

        /// <param name="user_id">userId</param>

        /// <returns>OK</returns>

        System.Threading.Tasks.Task<GeneratePaylinkResponse> MPaylinkGET3Async1156(string request_Id, string version, string country, string tenant, string locale, string user_id);

        /// <summary>
        /// credit-card expiry status
        /// </summary>

        /// <remarks>
        /// This API returns whether is credit-card is nearing expiry or is expired
        /// </remarks>

        /// <param name="request_Id">Request ID</param>

        /// <param name="version">Version</param>

        /// <param name="country">Country</param>

        /// <param name="locale">Locale</param>

        /// <param name="tenant">Tenant</param>

        /// <param name="sIN">SIN</param>

        /// <returns>OK</returns>

        System.Threading.Tasks.Task<CreditCardExpiryStatusResponse> MCreditCardAsync1180(string request_Id, string version, string country, string locale, string tenant, string sIN);

        /// <summary>
        /// payment callback
        /// </summary>

        /// <remarks>
        /// This API will process payment callback events from connector
        /// </remarks>

        /// <param name="request_Id">Request ID</param>

        /// <param name="version">Version</param>

        /// <param name="country">Country</param>

        /// <param name="tenant">Tenant</param>

        /// <param name="locale">Locale</param>

        /// <param name="payload">Request Payload</param>

        /// <returns>OK</returns>

        System.Threading.Tasks.Task MPaymentAsync1204(string request_Id, string version, string country, string tenant, string locale, Payload payload);

        /// <summary>
        /// payment method attached callback
        /// </summary>

        /// <remarks>
        /// This API will process payment method callback events from connector
        /// </remarks>

        /// <param name="request_Id">Request ID</param>

        /// <param name="version">Version</param>

        /// <param name="country">Country</param>

        /// <param name="tenant">Tenant</param>

        /// <param name="locale">Locale</param>

        /// <param name="payload">Request Payload</param>

        /// <returns>OK</returns>

        System.Threading.Tasks.Task MPaymentMethodAttachedAsync1228(string request_Id, string version, string country, string tenant, string locale, Payload2 payload);

        /// <summary>
        /// refund callback
        /// </summary>

        /// <remarks>
        /// This API will process refund callback events from connector
        /// </remarks>

        /// <param name="request_Id">Request ID</param>

        /// <param name="version">Version</param>

        /// <param name="country">Country</param>

        /// <param name="tenant">Tenant</param>

        /// <param name="locale">Locale</param>

        /// <param name="payload">Request Payload</param>

        /// <returns>OK</returns>

        System.Threading.Tasks.Task MRefundPOST2Async1252(string request_Id, string version, string country, string tenant, string locale, Payload3 payload);

        /// <summary>
        /// process manual payment request from billing service
        /// </summary>

        /// <remarks>
        /// This API add a new transaction with transaction type as MANUAL_PAYMENT and returns the transaction id
        /// </remarks>

        /// <param name="request_Id">Request ID</param>

        /// <param name="version">Version</param>

        /// <param name="country">Country</param>

        /// <param name="locale">Locale</param>

        /// <param name="tenant">Tenant</param>

        /// <param name="paymentRequest">Payload</param>

        /// <returns>OK</returns>

        System.Threading.Tasks.Task<ManualPayementReponse> MManualAsync1276(string request_Id, string version, string country, string locale, string tenant, ManualPaymentRequest paymentRequest);

        /// <summary>
        /// process recurrent payment
        /// </summary>

        /// <remarks>
        /// This API processes recurrent requests and returns payment details
        /// </remarks>

        /// <param name="request_Id">Request ID</param>

        /// <param name="version">Version</param>

        /// <param name="country">Country</param>

        /// <param name="locale">Locale</param>

        /// <param name="tenant">Tenant</param>

        /// <param name="paymentRequest">Payload</param>

        /// <returns>OK</returns>

        System.Threading.Tasks.Task<Response9> MRecurrentAsync1300(string request_Id, string version, string country, string locale, string tenant, RecurrentPaymentRequest paymentRequest);

        /// <summary>
        /// process upfront payment
        /// </summary>

        /// <remarks>
        /// This API processes upfront requests and returns payment details
        /// </remarks>

        /// <param name="request_Id">Request ID</param>

        /// <param name="version">Version</param>

        /// <param name="country">Country</param>

        /// <param name="locale">Locale</param>

        /// <param name="tenant">Tenant</param>

        /// <param name="paymentRequest">Payload</param>

        /// <returns>OK</returns>

        System.Threading.Tasks.Task<UpfrontPaymentResponse> MUpfront2Async1324(string request_Id, string version, string country, string locale, string tenant, UpfrontPaymentRequest paymentRequest);

        /// <summary>
        /// internally process refund transaction witjout cookie validation
        /// </summary>

        /// <remarks>
        /// This API processes refund of an existing transaction and return refund transaction id
        /// </remarks>

        /// <param name="request_Id">Request ID</param>

        /// <param name="version">Version</param>

        /// <param name="country">Country</param>

        /// <param name="locale">Locale</param>

        /// <param name="tenant">Tenant</param>

        /// <param name="payload">Payload</param>

        /// <returns>OK</returns>

        System.Threading.Tasks.Task<InternalRefundTransactionResponse> MRefundPOST3Async1348(string request_Id, string version, string country, string locale, string tenant, InternalRefundTransactionRequest payload);

        /// <summary>
        /// Get customer transactions
        /// </summary>

        /// <remarks>
        /// This API will return the list of customer transaction matched with filter criteria
        /// </remarks>

        /// <param name="version">Version</param>

        /// <param name="country">Country</param>

        /// <param name="locale">Locale</param>

        /// <param name="tenant">Tenant</param>

        /// <param name="userId">User Id</param>

        /// <param name="startDate">Transaction create date starting from</param>

        /// <param name="endDate">Transaction create date until to</param>

        /// <param name="transactionType">Type of Transaction eg. payment, refund</param>

        /// <param name="status">Transaction Status eg. PENDING, SUCCESS, FAILURE, etc.</param>

        /// <param name="page">Pagination - page number</param>

        /// <param name="pgeSize">Pagination - size of the page</param>

        /// <returns>OK</returns>

        System.Threading.Tasks.Task<Response10> MTransactions2Async1382(string version, string country, string locale, string tenant, string userId, string startDate, string endDate, string transactionType, string status, string page, string pgeSize);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]

    public partial class Controller : Microsoft.AspNetCore.Mvc.ControllerBase
    {
        private IController _implementation;

        public Controller()
        {

        }

        /// <summary>
        /// Upload the CSV file for bulk refund request
        /// </summary>
        /// <remarks>
        /// This API retrieves bulk refund request from the uploaded csv file
        /// </remarks>
        /// <param name="request_Id">Request ID</param>
        /// <param name="cookie">Paste kirk/cms-ui cookie here</param>
        /// <param name="version">Version</param>
        /// <param name="country">Country</param>
        /// <param name="locale">Locale</param>
        /// <param name="tenant">Tenant</param>
        /// <param name="template_version">optional - if empty gets the latest version</param>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("external/transaction/refund/validate", Name = "validate")]
        public System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.FileContentResult> MValidate1412([Microsoft.AspNetCore.Mvc.FromHeader(Name = "Request-Id")] string request_Id, [Microsoft.AspNetCore.Mvc.FromHeader] string cookie, string version, string country, string locale, string tenant, [Microsoft.AspNetCore.Mvc.FromQuery] string template_version)
        {

            var p = BeeRock.Core.M4dzhfiw5nzoControllerNS.RedirectCalls.CreateParameter( new string[] { "header", "request_Id","cookie","version","country","locale","tenant","template_version" }, new object[] { this.Request.Headers, request_Id, cookie, version, country, locale, tenant, template_version });
            var json = BeeRock.Core.M4dzhfiw5nzoControllerNS.RedirectCalls.HandleWithFileResponse("MValidate1412", p);
            return System.Threading.Tasks.Task.FromResult(json);

        }

        /// <summary>
        /// Initiate the bulk refund request
        /// </summary>
        /// <remarks>
        /// This API initiates the bulk refund request
        /// </remarks>
        /// <param name="request_Id">Request ID</param>
        /// <param name="cookie">Paste kirk/cms-ui cookie here</param>
        /// <param name="version">Version</param>
        /// <param name="country">Country</param>
        /// <param name="locale">Locale</param>
        /// <param name="tenant">Tenant</param>
        /// <param name="file_id">file_id</param>
        /// <param name="reason">reason</param>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("external/transaction/refund/{file_id}/status", Name = "statusGET")]
        public System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.FileContentResult> MStatusGET1434([Microsoft.AspNetCore.Mvc.FromHeader(Name = "Request-Id")] string request_Id, [Microsoft.AspNetCore.Mvc.FromHeader] string cookie, string version, string country, string locale, string tenant, [Microsoft.AspNetCore.Mvc.FromQuery] string file_id, [Microsoft.AspNetCore.Mvc.FromQuery] string reason)
        {

            var p = BeeRock.Core.M4dzhfiw5nzoControllerNS.RedirectCalls.CreateParameter( new string[] { "header", "request_Id","cookie","version","country","locale","tenant","file_id","reason" }, new object[] { this.Request.Headers, request_Id, cookie, version, country, locale, tenant, file_id, reason });
            var json = BeeRock.Core.M4dzhfiw5nzoControllerNS.RedirectCalls.HandleWithFileResponse("MStatusGET1434", p);
            return System.Threading.Tasks.Task.FromResult(json);

        }

        /// <summary>
        /// check the health of the service
        /// </summary>
        /// <remarks>
        /// This API will read a config value and display the result.
        /// </remarks>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("v1/{country}/{locale}/{tenant}/health", Name = "health")]
        public System.Threading.Tasks.Task<HealthStatus> MHealth1448()
        {

            var p = BeeRock.Core.M4dzhfiw5nzoControllerNS.RedirectCalls.CreateParameter( new string[] { "header" }, new object[] { this.Request.Headers });
            var json = BeeRock.Core.M4dzhfiw5nzoControllerNS.RedirectCalls.HandleWithResponse("MHealth1448", p);
            return System.Threading.Tasks.Task.FromResult(Newtonsoft.Json.JsonConvert.DeserializeObject<HealthStatus>(json));

        }

        /// <summary>
        /// check the db-health of the service
        /// </summary>
        /// <remarks>
        /// This API will ping the db and returns the result.
        /// </remarks>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("v1/{country}/{locale}/{tenant}/health/db", Name = "db")]
        public System.Threading.Tasks.Task<HealthStatus> MDb1462()
        {

            var p = BeeRock.Core.M4dzhfiw5nzoControllerNS.RedirectCalls.CreateParameter( new string[] { "header" }, new object[] { this.Request.Headers });
            var json = BeeRock.Core.M4dzhfiw5nzoControllerNS.RedirectCalls.HandleWithResponse("MDb1462", p);
            return System.Threading.Tasks.Task.FromResult(Newtonsoft.Json.JsonConvert.DeserializeObject<HealthStatus>(json));

        }

        /// <summary>
        /// debit from users card
        /// </summary>
        /// <remarks>
        /// This API will debit the amount from users card for the given userId
        /// </remarks>
        /// <param name="x_AUTH">Auth Token</param>
        /// <param name="payload">Request payload</param>
        /// <param name="country">Country</param>
        /// <param name="locale">Locale</param>
        /// <param name="tenant">Tenant</param>
        /// <param name="model_req_PaymentDebitReq_UserId">enter user_id</param>
        /// <param name="model_req_PaymentDebitReq_Channel">enter channel</param>
        /// <param name="model_req_PaymentDebitReq_Currency">enter currency</param>
        /// <param name="model_req_PaymentDebitReq_Amount">enter amount</param>
        /// <param name="model_req_PaymentDebitReq_TxnID">enter txn_id</param>
        /// <param name="model_req_PaymentDebitReq_CallbackUrl">enter callback_url</param>
        /// <param name="model_req_PaymentDebitReq_TransactionCategory">enter transaction_category</param>
        /// <param name="model_req_PaymentDebitReq_Description">enter description</param>
        /// <param name="model_req_PaymentDebitReq_RedirectUrl">enter redirect_url</param>
        /// <returns>OK</returns>
        [System.Obsolete]
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("v1/{country}/{locale}/{tenant}/payment/debit", Name = "debit")]
        public System.Threading.Tasks.Task<Response> MDebit1491([Microsoft.AspNetCore.Mvc.FromHeader(Name = "X-AUTH")] string x_AUTH, [Microsoft.AspNetCore.Mvc.FromBody] PaymentDebitReq payload, string country, string locale, string tenant, [Microsoft.AspNetCore.Mvc.FromQuery(Name = "model_req.PaymentDebitReq.UserId")] string model_req_PaymentDebitReq_UserId, [Microsoft.AspNetCore.Mvc.FromQuery(Name = "model_req.PaymentDebitReq.Channel")] string model_req_PaymentDebitReq_Channel, [Microsoft.AspNetCore.Mvc.FromQuery(Name = "model_req.PaymentDebitReq.Currency")] string model_req_PaymentDebitReq_Currency, [Microsoft.AspNetCore.Mvc.FromQuery(Name = "model_req.PaymentDebitReq.Amount")] string model_req_PaymentDebitReq_Amount, [Microsoft.AspNetCore.Mvc.FromQuery(Name = "model_req.PaymentDebitReq.TxnID")] string model_req_PaymentDebitReq_TxnID, [Microsoft.AspNetCore.Mvc.FromQuery(Name = "model_req.PaymentDebitReq.CallbackUrl")] string model_req_PaymentDebitReq_CallbackUrl, [Microsoft.AspNetCore.Mvc.FromQuery(Name = "model_req.PaymentDebitReq.TransactionCategory")] string model_req_PaymentDebitReq_TransactionCategory, [Microsoft.AspNetCore.Mvc.FromQuery(Name = "model_req.PaymentDebitReq.Description")] string model_req_PaymentDebitReq_Description, [Microsoft.AspNetCore.Mvc.FromQuery(Name = "model_req.PaymentDebitReq.RedirectUrl")] string model_req_PaymentDebitReq_RedirectUrl)
        {

            var p = BeeRock.Core.M4dzhfiw5nzoControllerNS.RedirectCalls.CreateParameter( new string[] { "header", "x_AUTH","payload","country","locale","tenant","model_req_PaymentDebitReq_UserId","model_req_PaymentDebitReq_Channel","model_req_PaymentDebitReq_Currency","model_req_PaymentDebitReq_Amount","model_req_PaymentDebitReq_TxnID","model_req_PaymentDebitReq_CallbackUrl","model_req_PaymentDebitReq_TransactionCategory","model_req_PaymentDebitReq_Description","model_req_PaymentDebitReq_RedirectUrl" }, new object[] { this.Request.Headers, x_AUTH, payload, country, locale, tenant, model_req_PaymentDebitReq_UserId, model_req_PaymentDebitReq_Channel, model_req_PaymentDebitReq_Currency, model_req_PaymentDebitReq_Amount, model_req_PaymentDebitReq_TxnID, model_req_PaymentDebitReq_CallbackUrl, model_req_PaymentDebitReq_TransactionCategory, model_req_PaymentDebitReq_Description, model_req_PaymentDebitReq_RedirectUrl });
            var json = BeeRock.Core.M4dzhfiw5nzoControllerNS.RedirectCalls.HandleWithResponse("MDebit1491", p);
            return System.Threading.Tasks.Task.FromResult(Newtonsoft.Json.JsonConvert.DeserializeObject<Response>(json));

        }

        /// <summary>
        /// fetch the transaction status
        /// </summary>
        /// <remarks>
        /// This API will return the transaction status for the given txnId
        /// </remarks>
        /// <param name="txn_id">Txn ID</param>
        /// <param name="country">Country</param>
        /// <param name="locale">Locale</param>
        /// <param name="tenant">Tenant</param>
        /// <returns>OK</returns>
        [System.Obsolete]
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("v1/{country}/{locale}/{tenant}/payment/status", Name = "statusGET2")]
        public System.Threading.Tasks.Task<Response> MStatusGET21510(string txn_id, string country, string locale, string tenant)
        {

            var p = BeeRock.Core.M4dzhfiw5nzoControllerNS.RedirectCalls.CreateParameter( new string[] { "header", "txn_id","country","locale","tenant" }, new object[] { this.Request.Headers, txn_id, country, locale, tenant });
            var json = BeeRock.Core.M4dzhfiw5nzoControllerNS.RedirectCalls.HandleWithResponse("MStatusGET21510", p);
            return System.Threading.Tasks.Task.FromResult(Newtonsoft.Json.JsonConvert.DeserializeObject<Response>(json));

        }

        /// <summary>
        /// create the payment instrument
        /// </summary>
        /// <remarks>
        /// This API will create a payment instrument for the given userId if the payment instrument already exists in old PAAS system
        /// </remarks>
        /// <param name="x_AUTH">Auth Token</param>
        /// <param name="country">Country</param>
        /// <param name="locale">Locale</param>
        /// <param name="tenant">Tenant</param>
        /// <param name="payload">Request payload</param>
        /// <param name="model_req_PaymentInstrumentsCreateReq_UserId">enter user_id</param>
        /// <param name="model_req_PaymentInstrumentsCreateReq_Channel">enter channel</param>
        /// <returns>OK</returns>
        [System.Obsolete]
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("v1/{country}/{locale}/{tenant}/payment_instrument/create", Name = "create")]
        public System.Threading.Tasks.Task<Response> MCreate1532([Microsoft.AspNetCore.Mvc.FromHeader(Name = "X-AUTH")] string x_AUTH, string country, string locale, string tenant, [Microsoft.AspNetCore.Mvc.FromBody] PaymentInstrumentsCreateReq payload, [Microsoft.AspNetCore.Mvc.FromQuery(Name = "model_req.PaymentInstrumentsCreateReq.UserId")] string model_req_PaymentInstrumentsCreateReq_UserId, [Microsoft.AspNetCore.Mvc.FromQuery(Name = "model_req.PaymentInstrumentsCreateReq.Channel")] string model_req_PaymentInstrumentsCreateReq_Channel)
        {

            var p = BeeRock.Core.M4dzhfiw5nzoControllerNS.RedirectCalls.CreateParameter( new string[] { "header", "x_AUTH","country","locale","tenant","payload","model_req_PaymentInstrumentsCreateReq_UserId","model_req_PaymentInstrumentsCreateReq_Channel" }, new object[] { this.Request.Headers, x_AUTH, country, locale, tenant, payload, model_req_PaymentInstrumentsCreateReq_UserId, model_req_PaymentInstrumentsCreateReq_Channel });
            var json = BeeRock.Core.M4dzhfiw5nzoControllerNS.RedirectCalls.HandleWithResponse("MCreate1532", p);
            return System.Threading.Tasks.Task.FromResult(Newtonsoft.Json.JsonConvert.DeserializeObject<Response>(json));

        }

        /// <summary>
        /// upsert the payment instrument
        /// </summary>
        /// <remarks>
        /// This API will upsert a payment instrument for the given userId
        /// </remarks>
        /// <param name="country">Country</param>
        /// <param name="locale">Locale</param>
        /// <param name="tenant">Tenant</param>
        /// <param name="payload">Request payload</param>
        /// <returns>OK</returns>
        [System.Obsolete]
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("v1/{country}/{locale}/{tenant}/payment_instrument/update", Name = "update")]
        public System.Threading.Tasks.Task<Response> MUpdate1551(string country, string locale, string tenant, [Microsoft.AspNetCore.Mvc.FromBody] PaymentInstrumentsUpdateReq payload)
        {

            var p = BeeRock.Core.M4dzhfiw5nzoControllerNS.RedirectCalls.CreateParameter( new string[] { "header", "country","locale","tenant","payload" }, new object[] { this.Request.Headers, country, locale, tenant, payload });
            var json = BeeRock.Core.M4dzhfiw5nzoControllerNS.RedirectCalls.HandleWithResponse("MUpdate1551", p);
            return System.Threading.Tasks.Task.FromResult(Newtonsoft.Json.JsonConvert.DeserializeObject<Response>(json));

        }

        /// <summary>
        /// Processes payment status report from the payment gateway
        /// </summary>
        /// <remarks>
        /// This API will do the post processing based on the status report received from Payment Gateway.
        /// </remarks>
        /// <param name="payload">Request payload</param>
        /// <param name="country">Country</param>
        /// <param name="locale">Locale</param>
        /// <param name="gateway">Gateway</param>
        /// <returns>OK</returns>
        [System.Obsolete]
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("v2/{country}/{locale}/{gateway}/payment/status/notification", Name = "notification")]
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, string>> MNotification1570([Microsoft.AspNetCore.Mvc.FromBody] PaymentGatewayStatusReq payload, string country, string locale, string gateway)
        {

            var p = BeeRock.Core.M4dzhfiw5nzoControllerNS.RedirectCalls.CreateParameter( new string[] { "header", "payload","country","locale","gateway" }, new object[] { this.Request.Headers, payload, country, locale, gateway });
            var json = BeeRock.Core.M4dzhfiw5nzoControllerNS.RedirectCalls.HandleWithResponse("MNotification1570", p);
            return System.Threading.Tasks.Task.FromResult(Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.Generic.Dictionary<string, string>>(json));

        }

        /// <summary>
        /// debit from users card
        /// </summary>
        /// <remarks>
        /// This API will debit the amount from users card for the given userId using either recurrent token method of drop-in upfront payment method
        /// </remarks>
        /// <param name="x_AUTH">Auth Token</param>
        /// <param name="payload">Request payload</param>
        /// <param name="country">Country</param>
        /// <param name="locale">Locale</param>
        /// <param name="tenant">Tenant</param>
        /// <param name="model_req_PaymentDebitReq_UserId">enter user_id</param>
        /// <param name="model_req_PaymentDebitReq_Channel">enter channel</param>
        /// <param name="model_req_PaymentDebitReq_Currency">enter currency</param>
        /// <param name="model_req_PaymentDebitReq_Amount">enter amount</param>
        /// <param name="model_req_PaymentDebitReq_TxnID">enter txn_id</param>
        /// <param name="model_req_PaymentDebitReq_CallbackUrl">enter callback_url</param>
        /// <param name="model_req_PaymentDebitReq_TransactionCategory">enter transaction_category</param>
        /// <param name="model_req_PaymentDebitReq_Description">enter description</param>
        /// <param name="model_req_PaymentDebitReq_RedirectUrl">enter redirect_url</param>
        /// <returns>OK</returns>
        [System.Obsolete]
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("v2/{country}/{locale}/{tenant}/payment/debit", Name = "debit2")]
        public System.Threading.Tasks.Task<Response> MDebit21599([Microsoft.AspNetCore.Mvc.FromHeader(Name = "X-AUTH")] string x_AUTH, [Microsoft.AspNetCore.Mvc.FromBody] PaymentDebitReq payload, string country, string locale, string tenant, [Microsoft.AspNetCore.Mvc.FromQuery(Name = "model_req.PaymentDebitReq.UserId")] string model_req_PaymentDebitReq_UserId, [Microsoft.AspNetCore.Mvc.FromQuery(Name = "model_req.PaymentDebitReq.Channel")] string model_req_PaymentDebitReq_Channel, [Microsoft.AspNetCore.Mvc.FromQuery(Name = "model_req.PaymentDebitReq.Currency")] string model_req_PaymentDebitReq_Currency, [Microsoft.AspNetCore.Mvc.FromQuery(Name = "model_req.PaymentDebitReq.Amount")] string model_req_PaymentDebitReq_Amount, [Microsoft.AspNetCore.Mvc.FromQuery(Name = "model_req.PaymentDebitReq.TxnID")] string model_req_PaymentDebitReq_TxnID, [Microsoft.AspNetCore.Mvc.FromQuery(Name = "model_req.PaymentDebitReq.CallbackUrl")] string model_req_PaymentDebitReq_CallbackUrl, [Microsoft.AspNetCore.Mvc.FromQuery(Name = "model_req.PaymentDebitReq.TransactionCategory")] string model_req_PaymentDebitReq_TransactionCategory, [Microsoft.AspNetCore.Mvc.FromQuery(Name = "model_req.PaymentDebitReq.Description")] string model_req_PaymentDebitReq_Description, [Microsoft.AspNetCore.Mvc.FromQuery(Name = "model_req.PaymentDebitReq.RedirectUrl")] string model_req_PaymentDebitReq_RedirectUrl)
        {

            var p = BeeRock.Core.M4dzhfiw5nzoControllerNS.RedirectCalls.CreateParameter( new string[] { "header", "x_AUTH","payload","country","locale","tenant","model_req_PaymentDebitReq_UserId","model_req_PaymentDebitReq_Channel","model_req_PaymentDebitReq_Currency","model_req_PaymentDebitReq_Amount","model_req_PaymentDebitReq_TxnID","model_req_PaymentDebitReq_CallbackUrl","model_req_PaymentDebitReq_TransactionCategory","model_req_PaymentDebitReq_Description","model_req_PaymentDebitReq_RedirectUrl" }, new object[] { this.Request.Headers, x_AUTH, payload, country, locale, tenant, model_req_PaymentDebitReq_UserId, model_req_PaymentDebitReq_Channel, model_req_PaymentDebitReq_Currency, model_req_PaymentDebitReq_Amount, model_req_PaymentDebitReq_TxnID, model_req_PaymentDebitReq_CallbackUrl, model_req_PaymentDebitReq_TransactionCategory, model_req_PaymentDebitReq_Description, model_req_PaymentDebitReq_RedirectUrl });
            var json = BeeRock.Core.M4dzhfiw5nzoControllerNS.RedirectCalls.HandleWithResponse("MDebit21599", p);
            return System.Threading.Tasks.Task.FromResult(Newtonsoft.Json.JsonConvert.DeserializeObject<Response>(json));

        }

        /// <summary>
        /// fetch the meta key values for the given payment reference id
        /// </summary>
        /// <remarks>
        /// This API will fetch the meta key values for the given payment reference id and also for the given meta key
        /// </remarks>
        /// <param name="x_AUTH">Auth Token</param>
        /// <param name="payment_reference_id">Payment Reference Id</param>
        /// <param name="meta_keyPath">Meta Key</param>
        /// <param name="country">Country</param>
        /// <param name="locale">Locale</param>
        /// <param name="tenant">Tenant</param>
        /// <param name="meta_keyQuery">Metadata Key</param>
        /// <returns>OK</returns>
        [System.Obsolete]
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("v2/{country}/{locale}/{tenant}/payment/meta/{payment_reference_id}", Name = "meta")]
        public System.Threading.Tasks.Task<Response> MMeta1621([Microsoft.AspNetCore.Mvc.FromHeader(Name = "X-AUTH")] string x_AUTH, string payment_reference_id, string meta_keyPath, string country, string locale, string tenant, [Microsoft.AspNetCore.Mvc.FromQuery(Name = "meta_key")] string meta_keyQuery)
        {

            var p = BeeRock.Core.M4dzhfiw5nzoControllerNS.RedirectCalls.CreateParameter( new string[] { "header", "x_AUTH","payment_reference_id","meta_keyPath","country","locale","tenant","meta_keyQuery" }, new object[] { this.Request.Headers, x_AUTH, payment_reference_id, meta_keyPath, country, locale, tenant, meta_keyQuery });
            var json = BeeRock.Core.M4dzhfiw5nzoControllerNS.RedirectCalls.HandleWithResponse("MMeta1621", p);
            return System.Threading.Tasks.Task.FromResult(Newtonsoft.Json.JsonConvert.DeserializeObject<Response>(json));

        }

        /// <summary>
        /// process the payment method and make payment
        /// </summary>
        /// <remarks>
        /// This API will debit the amount from users card for the given userId using upfront payment method
        /// </remarks>
        /// <param name="x_AUTH">Auth Token</param>
        /// <param name="payload">Request payload</param>
        /// <param name="country">Country</param>
        /// <param name="locale">Locale</param>
        /// <param name="tenant">Tenant</param>
        /// <returns>OK</returns>
        [System.Obsolete]
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("v2/{country}/{locale}/{tenant}/payment/process", Name = "process")]
        public System.Threading.Tasks.Task<Response> MProcess1641([Microsoft.AspNetCore.Mvc.FromHeader(Name = "X-AUTH")] string x_AUTH, [Microsoft.AspNetCore.Mvc.FromBody] PaymentProcessReq payload, string country, string locale, string tenant)
        {

            var p = BeeRock.Core.M4dzhfiw5nzoControllerNS.RedirectCalls.CreateParameter( new string[] { "header", "x_AUTH","payload","country","locale","tenant" }, new object[] { this.Request.Headers, x_AUTH, payload, country, locale, tenant });
            var json = BeeRock.Core.M4dzhfiw5nzoControllerNS.RedirectCalls.HandleWithResponse("MProcess1641", p);
            return System.Threading.Tasks.Task.FromResult(Newtonsoft.Json.JsonConvert.DeserializeObject<Response>(json));

        }

        /// <summary>
        /// Get payment information from bssmw
        /// </summary>
        /// <remarks>
        /// This API will return the list of transaction from bssmw
        /// </remarks>
        /// <param name="country">Country</param>
        /// <param name="locale">Locale</param>
        /// <param name="tenant">Tenant</param>
        /// <param name="identifier">Identifier eg. LW12345678</param>
        /// <returns>OK</returns>
        [System.Obsolete]
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("v3/{country}/{locale}/{tenant}/payment_information/get/{identifier}", Name = "get")]
        public System.Threading.Tasks.Task<LoadCustomerPaymentInfoResponse> MGet1660(string country, string locale, string tenant, string identifier)
        {

            var p = BeeRock.Core.M4dzhfiw5nzoControllerNS.RedirectCalls.CreateParameter( new string[] { "header", "country","locale","tenant","identifier" }, new object[] { this.Request.Headers, country, locale, tenant, identifier });
            var json = BeeRock.Core.M4dzhfiw5nzoControllerNS.RedirectCalls.HandleWithResponse("MGet1660", p);
            return System.Threading.Tasks.Task.FromResult(Newtonsoft.Json.JsonConvert.DeserializeObject<LoadCustomerPaymentInfoResponse>(json));

        }

        /// <summary>
        /// Get payment instrument details
        /// </summary>
        /// <remarks>
        /// This API will return the payment instrument details
        /// </remarks>
        /// <param name="country">Country</param>
        /// <param name="locale">Locale</param>
        /// <param name="tenant">Tenant</param>
        /// <param name="sSearchStr">sSearchStr eg, LW123234404</param>
        /// <param name="sSearchType">sSearchType eg, customer_account_number</param>
        /// <returns>OK</returns>
        [System.Obsolete]
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("v3/{country}/{locale}/{tenant}/payment_instrument/details", Name = "details")]
        public System.Threading.Tasks.Task<PaymentStatusResponse> MDetails1680(string country, string locale, string tenant, [Microsoft.AspNetCore.Mvc.FromQuery] string sSearchStr, [Microsoft.AspNetCore.Mvc.FromQuery] string sSearchType)
        {

            var p = BeeRock.Core.M4dzhfiw5nzoControllerNS.RedirectCalls.CreateParameter( new string[] { "header", "country","locale","tenant","sSearchStr","sSearchType" }, new object[] { this.Request.Headers, country, locale, tenant, sSearchStr, sSearchType });
            var json = BeeRock.Core.M4dzhfiw5nzoControllerNS.RedirectCalls.HandleWithResponse("MDetails1680", p);
            return System.Threading.Tasks.Task.FromResult(Newtonsoft.Json.JsonConvert.DeserializeObject<PaymentStatusResponse>(json));

        }

        /// <summary>
        /// Get payment instrument list
        /// </summary>
        /// <remarks>
        /// This API will return the payment instrument list
        /// </remarks>
        /// <param name="country">Country</param>
        /// <param name="locale">Locale</param>
        /// <param name="tenant">Tenant</param>
        /// <param name="sSearchStr">SearchStr eg, LW123234404</param>
        /// <param name="sSearchType">SearchType eg, customer_account_number</param>
        /// <param name="iLimit">iLimit</param>
        /// <param name="iDisplayLength">iDisplayLength</param>
        /// <param name="iDisplayStart">iDisplayStart</param>
        /// <param name="iOffset">iOffset</param>
        /// <returns>OK</returns>
        [System.Obsolete]
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("v3/{country}/{locale}/{tenant}/payment_instrument/list", Name = "list")]
        public System.Threading.Tasks.Task<PaymentStatusResponse> MList1704(string country, string locale, string tenant, [Microsoft.AspNetCore.Mvc.FromQuery] string sSearchStr, [Microsoft.AspNetCore.Mvc.FromQuery] string sSearchType, [Microsoft.AspNetCore.Mvc.FromQuery] string iLimit, [Microsoft.AspNetCore.Mvc.FromQuery] string iDisplayLength, [Microsoft.AspNetCore.Mvc.FromQuery] string iDisplayStart, [Microsoft.AspNetCore.Mvc.FromQuery] string iOffset)
        {

            var p = BeeRock.Core.M4dzhfiw5nzoControllerNS.RedirectCalls.CreateParameter( new string[] { "header", "country","locale","tenant","sSearchStr","sSearchType","iLimit","iDisplayLength","iDisplayStart","iOffset" }, new object[] { this.Request.Headers, country, locale, tenant, sSearchStr, sSearchType, iLimit, iDisplayLength, iDisplayStart, iOffset });
            var json = BeeRock.Core.M4dzhfiw5nzoControllerNS.RedirectCalls.HandleWithResponse("MList1704", p);
            return System.Threading.Tasks.Task.FromResult(Newtonsoft.Json.JsonConvert.DeserializeObject<PaymentStatusResponse>(json));

        }

        /// <summary>
        /// Get payment transaction list matched with params
        /// </summary>
        /// <remarks>
        /// This API will return the list of transaction matched with filter criteria
        /// </remarks>
        /// <param name="country">Country</param>
        /// <param name="locale">Locale</param>
        /// <param name="tenant">Tenant</param>
        /// <param name="sSearchType">Search Type eg. payment_reference_id, customer_account_number, etc.</param>
        /// <param name="sSearchStr">Search String</param>
        /// <param name="searchField">Search Field eg. payment_reference_id, customer_account_number, etc.</param>
        /// <param name="searchText">Search String</param>
        /// <param name="sType">Type of transaction eg. UPFRONT, RECURRENT</param>
        /// <param name="sGateway">Gateway eg. adyen, stripe, xendit, midtrans, gmo, etc.</param>
        /// <param name="sStatus">Transaction Status, eg. PENDING, SUCCESS, FAILURE, etc.</param>
        /// <param name="sCardLastFour">Last 4 digit of the card.</param>
        /// <param name="sCardFirstSix">Card bin</param>
        /// <param name="sPaymentReferenceId">Payment reference ID</param>
        /// <param name="sPspReference">Payment Gateway reference</param>
        /// <param name="iLimit">Limit, by default 10 // Vulcan Support</param>
        /// <param name="iDisplayLength">Display length by default 10 // SSR Support</param>
        /// <param name="iOffset">Offset by default 0 // vulcan support</param>
        /// <param name="iDisplayStart">Offset by default 0 // SSR Support</param>
        /// <returns>OK</returns>
        [System.Obsolete]
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("v3/{country}/{locale}/{tenant}/transaction/list", Name = "list2")]
        public System.Threading.Tasks.Task<TransactionListResponse> MList21737(string country, string locale, string tenant, [Microsoft.AspNetCore.Mvc.FromQuery] string sSearchType, [Microsoft.AspNetCore.Mvc.FromQuery] string sSearchStr, [Microsoft.AspNetCore.Mvc.FromQuery] string searchField, [Microsoft.AspNetCore.Mvc.FromQuery] string searchText, [Microsoft.AspNetCore.Mvc.FromQuery] string sType, [Microsoft.AspNetCore.Mvc.FromQuery] string sGateway, [Microsoft.AspNetCore.Mvc.FromQuery] string sStatus, [Microsoft.AspNetCore.Mvc.FromQuery] string sCardLastFour, [Microsoft.AspNetCore.Mvc.FromQuery] string sCardFirstSix, [Microsoft.AspNetCore.Mvc.FromQuery] string sPaymentReferenceId, [Microsoft.AspNetCore.Mvc.FromQuery] string sPspReference, [Microsoft.AspNetCore.Mvc.FromQuery] string iLimit, [Microsoft.AspNetCore.Mvc.FromQuery] string iDisplayLength, [Microsoft.AspNetCore.Mvc.FromQuery] string iOffset, [Microsoft.AspNetCore.Mvc.FromQuery] string iDisplayStart)
        {

            var p = BeeRock.Core.M4dzhfiw5nzoControllerNS.RedirectCalls.CreateParameter( new string[] { "header", "country","locale","tenant","sSearchType","sSearchStr","searchField","searchText","sType","sGateway","sStatus","sCardLastFour","sCardFirstSix","sPaymentReferenceId","sPspReference","iLimit","iDisplayLength","iOffset","iDisplayStart" }, new object[] { this.Request.Headers, country, locale, tenant, sSearchType, sSearchStr, searchField, searchText, sType, sGateway, sStatus, sCardLastFour, sCardFirstSix, sPaymentReferenceId, sPspReference, iLimit, iDisplayLength, iOffset, iDisplayStart });
            var json = BeeRock.Core.M4dzhfiw5nzoControllerNS.RedirectCalls.HandleWithResponse("MList21737", p);
            return System.Threading.Tasks.Task.FromResult(Newtonsoft.Json.JsonConvert.DeserializeObject<TransactionListResponse>(json));

        }

        /// <summary>
        /// Get payment status api
        /// </summary>
        /// <remarks>
        /// This API will return the status of transaction
        /// </remarks>
        /// <param name="country">Country</param>
        /// <param name="locale">Locale</param>
        /// <param name="tenant">Tenant</param>
        /// <param name="order_ref">Ecom Order ref</param>
        /// <param name="externalId">External identifier eg, order_ref or uuid</param>
        /// <param name="txn_id">External identifier eg, order_ref or uuid</param>
        /// <returns>OK</returns>
        [System.Obsolete]
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("v3/{country}/{locale}/{tenant}/transaction/status", Name = "statusGET3")]
        public System.Threading.Tasks.Task<PaymentStatusResponse> MStatusGET31758(string country, string locale, string tenant, [Microsoft.AspNetCore.Mvc.FromQuery] string order_ref, [Microsoft.AspNetCore.Mvc.FromQuery] string externalId, [Microsoft.AspNetCore.Mvc.FromQuery] string txn_id)
        {

            var p = BeeRock.Core.M4dzhfiw5nzoControllerNS.RedirectCalls.CreateParameter( new string[] { "header", "country","locale","tenant","order_ref","externalId","txn_id" }, new object[] { this.Request.Headers, country, locale, tenant, order_ref, externalId, txn_id });
            var json = BeeRock.Core.M4dzhfiw5nzoControllerNS.RedirectCalls.HandleWithResponse("MStatusGET31758", p);
            return System.Threading.Tasks.Task.FromResult(Newtonsoft.Json.JsonConvert.DeserializeObject<PaymentStatusResponse>(json));

        }

        /// <summary>
        /// get the latitude status
        /// </summary>
        /// <remarks>
        /// get the latitude status
        /// </remarks>
        /// <param name="country">Country</param>
        /// <param name="locale">Locale</param>
        /// <param name="tenant">Tenant</param>
        /// <param name="latitudeVerificationRequest">Payload</param>
        /// <returns>OK</returns>
        [System.Obsolete]
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("v3/{tenant}/{country}//latitude/status", Name = "statusPOST")]
        public System.Threading.Tasks.Task<GenericProviderServiceResponse> MStatusPOST1777(string country, string locale, string tenant, [Microsoft.AspNetCore.Mvc.FromBody] LatitudeVerificationRequest latitudeVerificationRequest)
        {

            var p = BeeRock.Core.M4dzhfiw5nzoControllerNS.RedirectCalls.CreateParameter( new string[] { "header", "country","locale","tenant","latitudeVerificationRequest" }, new object[] { this.Request.Headers, country, locale, tenant, latitudeVerificationRequest });
            var json = BeeRock.Core.M4dzhfiw5nzoControllerNS.RedirectCalls.HandleWithResponse("MStatusPOST1777", p);
            return System.Threading.Tasks.Task.FromResult(Newtonsoft.Json.JsonConvert.DeserializeObject<GenericProviderServiceResponse>(json));

        }

        /// <summary>
        /// get the payment upfront
        /// </summary>
        /// <remarks>
        /// get the payment upfront details
        /// </remarks>
        /// <param name="country">Country</param>
        /// <param name="locale">Locale</param>
        /// <param name="tenant">Tenant</param>
        /// <param name="paymentRequest">Payload</param>
        /// <returns>OK</returns>
        [System.Obsolete]
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("v3/{tenant}/{country}/payment/upfront", Name = "upfront")]
        public System.Threading.Tasks.Task<PaymentRequestResponse> MUpfront1796(string country, string locale, string tenant, [Microsoft.AspNetCore.Mvc.FromBody] AsyncPaymentRequest paymentRequest)
        {

            var p = BeeRock.Core.M4dzhfiw5nzoControllerNS.RedirectCalls.CreateParameter( new string[] { "header", "country","locale","tenant","paymentRequest" }, new object[] { this.Request.Headers, country, locale, tenant, paymentRequest });
            var json = BeeRock.Core.M4dzhfiw5nzoControllerNS.RedirectCalls.HandleWithResponse("MUpfront1796", p);
            return System.Threading.Tasks.Task.FromResult(Newtonsoft.Json.JsonConvert.DeserializeObject<PaymentRequestResponse>(json));

        }

        /// <summary>
        /// Get payment instrument details
        /// </summary>
        /// <remarks>
        /// This API will return the payment instrument details
        /// </remarks>
        /// <param name="version">Version</param>
        /// <param name="country">Country</param>
        /// <param name="locale">Locale</param>
        /// <param name="tenant">Tenant</param>
        /// <param name="sSearchStr">sSearchStr eg, LW123234404</param>
        /// <param name="sSearchType">sSearchType eg, customer_account_number</param>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("{version}/{country}/{locale}/{tenant}/admin/payment-instrument/details", Name = "details2")]
        public System.Threading.Tasks.Task<Response2> MDetails21816(string version, string country, string locale, string tenant, [Microsoft.AspNetCore.Mvc.FromQuery] string sSearchStr, [Microsoft.AspNetCore.Mvc.FromQuery] string sSearchType)
        {

            var p = BeeRock.Core.M4dzhfiw5nzoControllerNS.RedirectCalls.CreateParameter( new string[] { "header", "version","country","locale","tenant","sSearchStr","sSearchType" }, new object[] { this.Request.Headers, version, country, locale, tenant, sSearchStr, sSearchType });
            var json = BeeRock.Core.M4dzhfiw5nzoControllerNS.RedirectCalls.HandleWithResponse("MDetails21816", p);
            return System.Threading.Tasks.Task.FromResult(Newtonsoft.Json.JsonConvert.DeserializeObject<Response2>(json));

        }

        /// <summary>
        /// Get payment instrument list
        /// </summary>
        /// <remarks>
        /// This API will return the payment instrument list
        /// </remarks>
        /// <param name="version">Version</param>
        /// <param name="country">Country</param>
        /// <param name="locale">Locale</param>
        /// <param name="tenant">Tenant</param>
        /// <param name="sSearchStr">SearchStr eg, LW123234404</param>
        /// <param name="sSearchType">SearchType eg, customer_account_number</param>
        /// <param name="iLimit">iLimit</param>
        /// <param name="iDisplayLength">iDisplayLength</param>
        /// <param name="iDisplayStart">iDisplayStart</param>
        /// <param name="iOffset">iOffset</param>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("{version}/{country}/{locale}/{tenant}/admin/payment-instrument/list", Name = "list3")]
        public System.Threading.Tasks.Task<Response3> MList31840(string version, string country, string locale, string tenant, [Microsoft.AspNetCore.Mvc.FromQuery] string sSearchStr, [Microsoft.AspNetCore.Mvc.FromQuery] string sSearchType, [Microsoft.AspNetCore.Mvc.FromQuery] string iLimit, [Microsoft.AspNetCore.Mvc.FromQuery] string iDisplayLength, [Microsoft.AspNetCore.Mvc.FromQuery] string iDisplayStart, [Microsoft.AspNetCore.Mvc.FromQuery] string iOffset)
        {

            var p = BeeRock.Core.M4dzhfiw5nzoControllerNS.RedirectCalls.CreateParameter( new string[] { "header", "version","country","locale","tenant","sSearchStr","sSearchType","iLimit","iDisplayLength","iDisplayStart","iOffset" }, new object[] { this.Request.Headers, version, country, locale, tenant, sSearchStr, sSearchType, iLimit, iDisplayLength, iDisplayStart, iOffset });
            var json = BeeRock.Core.M4dzhfiw5nzoControllerNS.RedirectCalls.HandleWithResponse("MList31840", p);
            return System.Threading.Tasks.Task.FromResult(Newtonsoft.Json.JsonConvert.DeserializeObject<Response3>(json));

        }

        /// <summary>
        /// Sends Card Expired notification to users whose card expires between the start and end month.
        /// </summary>
        /// <remarks>
        /// Sends Card Expired notification to users whose card expires between the start and end month.
        /// </remarks>
        /// <param name="version">Version</param>
        /// <param name="country">Country</param>
        /// <param name="locale">Locale</param>
        /// <param name="tenant">Tenant</param>
        /// <param name="reminder_schedule">credit_card_expiry_reminder_1</param>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("{version}/{country}/{locale}/{tenant}/admin/payment-instrument/notify-expiry/{reminder-schedule}", Name = "notify-expiry")]
        public System.Threading.Tasks.Task MNotifyExpiry1859(string version, string country, string locale, string tenant, string reminder_schedule)
        {

            var p = BeeRock.Core.M4dzhfiw5nzoControllerNS.RedirectCalls.CreateParameter( new string[] { "header", "version","country","locale","tenant","reminder_schedule" }, new object[] { this.Request.Headers, version, country, locale, tenant, reminder_schedule });
            var json = BeeRock.Core.M4dzhfiw5nzoControllerNS.RedirectCalls.HandleWithResponse("MNotifyExpiry1859", p);
            return System.Threading.Tasks.Task.CompletedTask;

        }

        /// <summary>
        /// get refund status
        /// </summary>
        /// <remarks>
        /// This API returns a list of refund based on query filters
        /// </remarks>
        /// <param name="request_Id">Request ID</param>
        /// <param name="version">Version</param>
        /// <param name="country">Country</param>
        /// <param name="locale">Locale</param>
        /// <param name="tenant">Tenant</param>
        /// <param name="fromDate">From Date</param>
        /// <param name="toDate">To Date</param>
        /// <param name="offset">Offset</param>
        /// <param name="pageSize">Page size</param>
        /// <param name="key">Key</param>
        /// <param name="value">Value</param>
        /// <param name="status">Status</param>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("{version}/{country}/{locale}/{tenant}/admin/refunds", Name = "refunds")]
        public System.Threading.Tasks.Task<RefundListResponse> MRefunds1885([Microsoft.AspNetCore.Mvc.FromHeader(Name = "Request-Id")] string request_Id, string version, string country, string locale, string tenant, [Microsoft.AspNetCore.Mvc.FromQuery] string fromDate, [Microsoft.AspNetCore.Mvc.FromQuery] string toDate, [Microsoft.AspNetCore.Mvc.FromQuery] string offset, [Microsoft.AspNetCore.Mvc.FromQuery] string pageSize, [Microsoft.AspNetCore.Mvc.FromQuery] string key, [Microsoft.AspNetCore.Mvc.FromQuery] string value, [Microsoft.AspNetCore.Mvc.FromQuery] string status)
        {

            var p = BeeRock.Core.M4dzhfiw5nzoControllerNS.RedirectCalls.CreateParameter( new string[] { "header", "request_Id","version","country","locale","tenant","fromDate","toDate","offset","pageSize","key","value","status" }, new object[] { this.Request.Headers, request_Id, version, country, locale, tenant, fromDate, toDate, offset, pageSize, key, value, status });
            var json = BeeRock.Core.M4dzhfiw5nzoControllerNS.RedirectCalls.HandleWithResponse("MRefunds1885", p);
            return System.Threading.Tasks.Task.FromResult(Newtonsoft.Json.JsonConvert.DeserializeObject<RefundListResponse>(json));

        }

        /// <summary>
        /// get specification
        /// </summary>
        /// <remarks>
        /// This API will process to get specification details
        /// </remarks>
        /// <param name="request_Id">Request ID</param>
        /// <param name="version">Version</param>
        /// <param name="country">Country</param>
        /// <param name="tenant">Tenant</param>
        /// <param name="locale">Locale</param>
        /// <param name="configKey">configKey eg, upfront</param>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("{version}/{country}/{locale}/{tenant}/admin/specification", Name = "specificationGET")]
        public System.Threading.Tasks.Task<GetSpecResp> MSpecificationGET1905([Microsoft.AspNetCore.Mvc.FromHeader(Name = "Request-Id")] string request_Id, string version, string country, string tenant, string locale, [Microsoft.AspNetCore.Mvc.FromQuery] string configKey)
        {

            var p = BeeRock.Core.M4dzhfiw5nzoControllerNS.RedirectCalls.CreateParameter( new string[] { "header", "request_Id","version","country","tenant","locale","configKey" }, new object[] { this.Request.Headers, request_Id, version, country, tenant, locale, configKey });
            var json = BeeRock.Core.M4dzhfiw5nzoControllerNS.RedirectCalls.HandleWithResponse("MSpecificationGET1905", p);
            return System.Threading.Tasks.Task.FromResult(Newtonsoft.Json.JsonConvert.DeserializeObject<GetSpecResp>(json));

        }

        /// <summary>
        /// update specification
        /// </summary>
        /// <remarks>
        /// This API will process to update specification
        /// </remarks>
        /// <param name="request_Id">Request ID</param>
        /// <param name="version">Version</param>
        /// <param name="country">Country</param>
        /// <param name="tenant">Tenant</param>
        /// <param name="locale">Locale</param>
        /// <param name="req">Payload</param>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("{version}/{country}/{locale}/{tenant}/admin/specification", Name = "specificationPUT")]
        public System.Threading.Tasks.Task<UpdateSpecResp> MSpecificationPUT1925([Microsoft.AspNetCore.Mvc.FromHeader(Name = "Request-Id")] string request_Id, string version, string country, string tenant, string locale, [Microsoft.AspNetCore.Mvc.FromBody] Req req)
        {

            var p = BeeRock.Core.M4dzhfiw5nzoControllerNS.RedirectCalls.CreateParameter( new string[] { "header", "request_Id","version","country","tenant","locale","req" }, new object[] { this.Request.Headers, request_Id, version, country, tenant, locale, req });
            var json = BeeRock.Core.M4dzhfiw5nzoControllerNS.RedirectCalls.HandleWithResponse("MSpecificationPUT1925", p);
            return System.Threading.Tasks.Task.FromResult(Newtonsoft.Json.JsonConvert.DeserializeObject<UpdateSpecResp>(json));

        }

        /// <summary>
        /// add specification
        /// </summary>
        /// <remarks>
        /// This API will process to add specification
        /// </remarks>
        /// <param name="request_Id">Request ID</param>
        /// <param name="version">Version</param>
        /// <param name="country">Country</param>
        /// <param name="tenant">Tenant</param>
        /// <param name="locale">Locale</param>
        /// <param name="req">Payload</param>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("{version}/{country}/{locale}/{tenant}/admin/specification", Name = "specificationPOST")]
        public System.Threading.Tasks.Task<AddSpecResp> MSpecificationPOST1945([Microsoft.AspNetCore.Mvc.FromHeader(Name = "Request-Id")] string request_Id, string version, string country, string tenant, string locale, [Microsoft.AspNetCore.Mvc.FromBody] Req2 req)
        {

            var p = BeeRock.Core.M4dzhfiw5nzoControllerNS.RedirectCalls.CreateParameter( new string[] { "header", "request_Id","version","country","tenant","locale","req" }, new object[] { this.Request.Headers, request_Id, version, country, tenant, locale, req });
            var json = BeeRock.Core.M4dzhfiw5nzoControllerNS.RedirectCalls.HandleWithResponse("MSpecificationPOST1945", p);
            return System.Threading.Tasks.Task.FromResult(Newtonsoft.Json.JsonConvert.DeserializeObject<AddSpecResp>(json));

        }

        /// <summary>
        /// delete specification
        /// </summary>
        /// <remarks>
        /// This API will process to delete specification
        /// </remarks>
        /// <param name="request_Id">Request ID</param>
        /// <param name="version">Version</param>
        /// <param name="country">Country</param>
        /// <param name="tenant">Tenant</param>
        /// <param name="locale">Locale</param>
        /// <param name="configKey">configKey eg, upfront</param>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpDelete, Microsoft.AspNetCore.Mvc.Route("{version}/{country}/{locale}/{tenant}/admin/specification", Name = "specificationDELETE")]
        public System.Threading.Tasks.Task<DeleteSpecResp> MSpecificationDELETE1965([Microsoft.AspNetCore.Mvc.FromHeader(Name = "Request-Id")] string request_Id, string version, string country, string tenant, string locale, [Microsoft.AspNetCore.Mvc.FromQuery] string configKey)
        {

            var p = BeeRock.Core.M4dzhfiw5nzoControllerNS.RedirectCalls.CreateParameter( new string[] { "header", "request_Id","version","country","tenant","locale","configKey" }, new object[] { this.Request.Headers, request_Id, version, country, tenant, locale, configKey });
            var json = BeeRock.Core.M4dzhfiw5nzoControllerNS.RedirectCalls.HandleWithResponse("MSpecificationDELETE1965", p);
            return System.Threading.Tasks.Task.FromResult(Newtonsoft.Json.JsonConvert.DeserializeObject<DeleteSpecResp>(json));

        }

        /// <summary>
        /// Get payment transaction list matched with params
        /// </summary>
        /// <remarks>
        /// This API will return the list of transaction matched with filter criteria
        /// </remarks>
        /// <param name="version">Version</param>
        /// <param name="country">Country</param>
        /// <param name="locale">Locale</param>
        /// <param name="tenant">Tenant</param>
        /// <param name="sSearchType">Search Type eg. payment_reference_id, customer_account_number, etc.</param>
        /// <param name="sSearchStr">Search String</param>
        /// <param name="searchField">Search Field eg. payment_reference_id, customer_account_number, etc.</param>
        /// <param name="searchText">Search String</param>
        /// <param name="sType">Type of transaction eg. UPFRONT, RECURRENT</param>
        /// <param name="sGateway">Gateway eg. adyen, stripe, xendit, midtrans, gmo, etc.</param>
        /// <param name="sStatus">Transaction Status, eg. PENDING, SUCCESS, FAILURE, etc.</param>
        /// <param name="sCardLastFour">Last 4 digit of the card.</param>
        /// <param name="sCardFirstSix">Card bin</param>
        /// <param name="sPaymentReferenceId">Payment reference ID</param>
        /// <param name="iLimit">Limit, by default 10 // Vulcan Support</param>
        /// <param name="iDisplayLength">Display length by default 10 // SSR Support</param>
        /// <param name="iOffset">Offset by default 0 // vulcan support</param>
        /// <param name="iDisplayStart">Offset by default 0 // SSR Support</param>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("{version}/{country}/{locale}/{tenant}/admin/transaction/list", Name = "list4")]
        public System.Threading.Tasks.Task<Response4> MList41997(string version, string country, string locale, string tenant, [Microsoft.AspNetCore.Mvc.FromQuery] string sSearchType, [Microsoft.AspNetCore.Mvc.FromQuery] string sSearchStr, [Microsoft.AspNetCore.Mvc.FromQuery] string searchField, [Microsoft.AspNetCore.Mvc.FromQuery] string searchText, [Microsoft.AspNetCore.Mvc.FromQuery] string sType, [Microsoft.AspNetCore.Mvc.FromQuery] string sGateway, [Microsoft.AspNetCore.Mvc.FromQuery] string sStatus, [Microsoft.AspNetCore.Mvc.FromQuery] string sCardLastFour, [Microsoft.AspNetCore.Mvc.FromQuery] string sCardFirstSix, [Microsoft.AspNetCore.Mvc.FromQuery] string sPaymentReferenceId, [Microsoft.AspNetCore.Mvc.FromQuery] string iLimit, [Microsoft.AspNetCore.Mvc.FromQuery] string iDisplayLength, [Microsoft.AspNetCore.Mvc.FromQuery] string iOffset, [Microsoft.AspNetCore.Mvc.FromQuery] string iDisplayStart)
        {

            var p = BeeRock.Core.M4dzhfiw5nzoControllerNS.RedirectCalls.CreateParameter( new string[] { "header", "version","country","locale","tenant","sSearchType","sSearchStr","searchField","searchText","sType","sGateway","sStatus","sCardLastFour","sCardFirstSix","sPaymentReferenceId","iLimit","iDisplayLength","iOffset","iDisplayStart" }, new object[] { this.Request.Headers, version, country, locale, tenant, sSearchType, sSearchStr, searchField, searchText, sType, sGateway, sStatus, sCardLastFour, sCardFirstSix, sPaymentReferenceId, iLimit, iDisplayLength, iOffset, iDisplayStart });
            var json = BeeRock.Core.M4dzhfiw5nzoControllerNS.RedirectCalls.HandleWithResponse("MList41997", p);
            return System.Threading.Tasks.Task.FromResult(Newtonsoft.Json.JsonConvert.DeserializeObject<Response4>(json));

        }

        /// <summary>
        /// get paylink information
        /// </summary>
        /// <remarks>
        /// This API will fetch the paylink related information
        /// </remarks>
        /// <param name="request_Id">Request ID</param>
        /// <param name="version">Version</param>
        /// <param name="country">Country</param>
        /// <param name="tenant">Tenant</param>
        /// <param name="locale">Locale</param>
        /// <param name="paylink_id">paylinkId</param>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("{version}/{country}/{locale}/{tenant}/external/paylink/{paylink_id}", Name = "paylinkGET")]
        public System.Threading.Tasks.Task<GetPaylinkInfoResponse> MPaylinkGET2017([Microsoft.AspNetCore.Mvc.FromHeader(Name = "Request-Id")] string request_Id, string version, string country, string tenant, string locale, string paylink_id)
        {

            var p = BeeRock.Core.M4dzhfiw5nzoControllerNS.RedirectCalls.CreateParameter( new string[] { "header", "request_Id","version","country","tenant","locale","paylink_id" }, new object[] { this.Request.Headers, request_Id, version, country, tenant, locale, paylink_id });
            var json = BeeRock.Core.M4dzhfiw5nzoControllerNS.RedirectCalls.HandleWithResponse("MPaylinkGET2017", p);
            return System.Threading.Tasks.Task.FromResult(Newtonsoft.Json.JsonConvert.DeserializeObject<GetPaylinkInfoResponse>(json));

        }

        /// <summary>
        /// update credit card
        /// </summary>
        /// <remarks>
        /// end point which web-front/mobile call to initiate cc update
        /// </remarks>
        /// <param name="request_Id">Request ID</param>
        /// <param name="version">Version</param>
        /// <param name="country">Country</param>
        /// <param name="locale">Locale</param>
        /// <param name="tenant">Tenant</param>
        /// <param name="paymentRequest">Payload</param>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("{version}/{country}/{locale}/{tenant}/external/payment/save-and-get-card-details", Name = "save-and-get-card-details")]
        public System.Threading.Tasks.Task<UpfrontPaymentResponse> MSaveAndGetCardDetails2037([Microsoft.AspNetCore.Mvc.FromHeader(Name = "Request-Id")] string request_Id, string version, string country, string locale, string tenant, [Microsoft.AspNetCore.Mvc.FromBody] SaveAndUpdateCardRequest paymentRequest)
        {

            var p = BeeRock.Core.M4dzhfiw5nzoControllerNS.RedirectCalls.CreateParameter( new string[] { "header", "request_Id","version","country","locale","tenant","paymentRequest" }, new object[] { this.Request.Headers, request_Id, version, country, locale, tenant, paymentRequest });
            var json = BeeRock.Core.M4dzhfiw5nzoControllerNS.RedirectCalls.HandleWithResponse("MSaveAndGetCardDetails2037", p);
            return System.Threading.Tasks.Task.FromResult(Newtonsoft.Json.JsonConvert.DeserializeObject<UpfrontPaymentResponse>(json));

        }

        /// <summary>
        /// get paylink specification
        /// </summary>
        /// <remarks>
        /// TThis API will process to get paylink specification details
        /// </remarks>
        /// <param name="request_Id">Request ID</param>
        /// <param name="version">Version</param>
        /// <param name="country">Country</param>
        /// <param name="tenant">Tenant</param>
        /// <param name="locale">Locale</param>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("{version}/{country}/{locale}/{tenant}/external/specification/paylink", Name = "paylinkGET2")]
        public System.Threading.Tasks.Task<GetPaylinkSpecificationResponse> MPaylinkGET22056([Microsoft.AspNetCore.Mvc.FromHeader(Name = "Request-Id")] string request_Id, string version, string country, string tenant, string locale)
        {

            var p = BeeRock.Core.M4dzhfiw5nzoControllerNS.RedirectCalls.CreateParameter( new string[] { "header", "request_Id","version","country","tenant","locale" }, new object[] { this.Request.Headers, request_Id, version, country, tenant, locale });
            var json = BeeRock.Core.M4dzhfiw5nzoControllerNS.RedirectCalls.HandleWithResponse("MPaylinkGET22056", p);
            return System.Threading.Tasks.Task.FromResult(Newtonsoft.Json.JsonConvert.DeserializeObject<GetPaylinkSpecificationResponse>(json));

        }

        /// <summary>
        /// update paylink specifications
        /// </summary>
        /// <remarks>
        /// This API will add new entry to paylink specification table with new version
        /// </remarks>
        /// <param name="request_Id">Request ID</param>
        /// <param name="version">Version</param>
        /// <param name="country">Country</param>
        /// <param name="tenant">Tenant</param>
        /// <param name="locale">Locale</param>
        /// <param name="payload">Payload</param>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("{version}/{country}/{locale}/{tenant}/external/specification/paylink", Name = "paylinkPOST")]
        public System.Threading.Tasks.Task<UpdatePaylinkSpecificationResponse> MPaylinkPOST2076([Microsoft.AspNetCore.Mvc.FromHeader(Name = "Request-Id")] string request_Id, string version, string country, string tenant, string locale, [Microsoft.AspNetCore.Mvc.FromBody] UpdatePaylinkSpecificationRequest payload)
        {

            var p = BeeRock.Core.M4dzhfiw5nzoControllerNS.RedirectCalls.CreateParameter( new string[] { "header", "request_Id","version","country","tenant","locale","payload" }, new object[] { this.Request.Headers, request_Id, version, country, tenant, locale, payload });
            var json = BeeRock.Core.M4dzhfiw5nzoControllerNS.RedirectCalls.HandleWithResponse("MPaylinkPOST2076", p);
            return System.Threading.Tasks.Task.FromResult(Newtonsoft.Json.JsonConvert.DeserializeObject<UpdatePaylinkSpecificationResponse>(json));

        }

        /// <summary>
        /// view audits
        /// </summary>
        /// <remarks>
        /// This API will return the audit logs of transaction filtered by user
        /// </remarks>
        /// <param name="version">Version</param>
        /// <param name="country">Country</param>
        /// <param name="locale">Locale</param>
        /// <param name="tenant">Tenant</param>
        /// <param name="userId">User Id</param>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("{version}/{country}/{locale}/{tenant}/external/transaction/list", Name = "list5")]
        public System.Threading.Tasks.Task<Response5> MList52095(string version, string country, string locale, string tenant, [Microsoft.AspNetCore.Mvc.FromQuery] string userId)
        {

            var p = BeeRock.Core.M4dzhfiw5nzoControllerNS.RedirectCalls.CreateParameter( new string[] { "header", "version","country","locale","tenant","userId" }, new object[] { this.Request.Headers, version, country, locale, tenant, userId });
            var json = BeeRock.Core.M4dzhfiw5nzoControllerNS.RedirectCalls.HandleWithResponse("MList52095", p);
            return System.Threading.Tasks.Task.FromResult(Newtonsoft.Json.JsonConvert.DeserializeObject<Response5>(json));

        }

        /// <summary>
        /// Get bulk refund csv template by version
        /// </summary>
        /// <remarks>
        /// This API retrives template for bulk refund in csv format. version is optional
        /// </remarks>
        /// <param name="request_Id">Request ID</param>
        /// <param name="cookie">Paste kirk/cms-ui cookie here</param>
        /// <param name="version">Version</param>
        /// <param name="country">Country</param>
        /// <param name="locale">Locale</param>
        /// <param name="tenant">Tenant</param>
        /// <param name="template_version">optional - if empty gets the latest version</param>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("{version}/{country}/{locale}/{tenant}/external/transaction/refund/template", Name = "template")]
        public System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.FileContentResult> MTemplate2116([Microsoft.AspNetCore.Mvc.FromHeader(Name = "Request-Id")] string request_Id, [Microsoft.AspNetCore.Mvc.FromHeader] string cookie, string version, string country, string locale, string tenant, [Microsoft.AspNetCore.Mvc.FromQuery] string template_version)
        {

            var p = BeeRock.Core.M4dzhfiw5nzoControllerNS.RedirectCalls.CreateParameter( new string[] { "header", "request_Id","cookie","version","country","locale","tenant","template_version" }, new object[] { this.Request.Headers, request_Id, cookie, version, country, locale, tenant, template_version });
            var json = BeeRock.Core.M4dzhfiw5nzoControllerNS.RedirectCalls.HandleWithFileResponse("MTemplate2116", p);
            return System.Threading.Tasks.Task.FromResult(json);

        }

        /// <summary>
        /// get payment status
        /// </summary>
        /// <remarks>
        /// This API returns the status of a payment transaction
        /// </remarks>
        /// <param name="request_Id">Request ID</param>
        /// <param name="version">Version</param>
        /// <param name="country">Country</param>
        /// <param name="locale">Locale</param>
        /// <param name="tenant">Tenant</param>
        /// <param name="order_ref">Ecom Order ref</param>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("{version}/{country}/{locale}/{tenant}/external/transaction/status", Name = "statusGET4")]
        public System.Threading.Tasks.Task<PaymentStatusResponse2> MStatusGET42136([Microsoft.AspNetCore.Mvc.FromHeader(Name = "Request-Id")] string request_Id, string version, string country, string locale, string tenant, [Microsoft.AspNetCore.Mvc.FromQuery] string order_ref)
        {

            var p = BeeRock.Core.M4dzhfiw5nzoControllerNS.RedirectCalls.CreateParameter( new string[] { "header", "request_Id","version","country","locale","tenant","order_ref" }, new object[] { this.Request.Headers, request_Id, version, country, locale, tenant, order_ref });
            var json = BeeRock.Core.M4dzhfiw5nzoControllerNS.RedirectCalls.HandleWithResponse("MStatusGET42136", p);
            return System.Threading.Tasks.Task.FromResult(Newtonsoft.Json.JsonConvert.DeserializeObject<PaymentStatusResponse2>(json));

        }

        /// <summary>
        /// Get refundable details of a transaction by transaction id
        /// </summary>
        /// <remarks>
        /// This API retrives refundable details of a transaction by transaction id
        /// </remarks>
        /// <param name="request_Id">Request ID</param>
        /// <param name="cookie">Paste kirk/cms-ui cookie here</param>
        /// <param name="version">Version</param>
        /// <param name="country">Country</param>
        /// <param name="locale">Locale</param>
        /// <param name="tenant">Tenant</param>
        /// <param name="transactionId">Transaction Id</param>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("{version}/{country}/{locale}/{tenant}/external/transaction/{transactionId}/refund", Name = "refundGET")]
        public System.Threading.Tasks.Task<RefundableDeatilsResponse> MRefundGET2157([Microsoft.AspNetCore.Mvc.FromHeader(Name = "Request-Id")] string request_Id, [Microsoft.AspNetCore.Mvc.FromHeader] string cookie, string version, string country, string locale, string tenant, string transactionId)
        {

            var p = BeeRock.Core.M4dzhfiw5nzoControllerNS.RedirectCalls.CreateParameter( new string[] { "header", "request_Id","cookie","version","country","locale","tenant","transactionId" }, new object[] { this.Request.Headers, request_Id, cookie, version, country, locale, tenant, transactionId });
            var json = BeeRock.Core.M4dzhfiw5nzoControllerNS.RedirectCalls.HandleWithResponse("MRefundGET2157", p);
            return System.Threading.Tasks.Task.FromResult(Newtonsoft.Json.JsonConvert.DeserializeObject<RefundableDeatilsResponse>(json));

        }

        /// <summary>
        /// process refund transaction
        /// </summary>
        /// <remarks>
        /// This API processes refund of an existing transaction and return refund transaction id
        /// </remarks>
        /// <param name="request_Id">Request ID</param>
        /// <param name="cookie">Paste kirk/cms-ui cookie here</param>
        /// <param name="version">Version</param>
        /// <param name="country">Country</param>
        /// <param name="locale">Locale</param>
        /// <param name="tenant">Tenant</param>
        /// <param name="payload">Payload</param>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("{version}/{country}/{locale}/{tenant}/external/transaction/{transactionId}/refund", Name = "refundPOST")]
        public System.Threading.Tasks.Task<RefundTransactionResponse> MRefundPOST2178([Microsoft.AspNetCore.Mvc.FromHeader(Name = "Request-Id")] string request_Id, [Microsoft.AspNetCore.Mvc.FromHeader] string cookie, string version, string country, string locale, string tenant, [Microsoft.AspNetCore.Mvc.FromBody] ProcessRefundTransactionRequest payload)
        {

            var p = BeeRock.Core.M4dzhfiw5nzoControllerNS.RedirectCalls.CreateParameter( new string[] { "header", "request_Id","cookie","version","country","locale","tenant","payload" }, new object[] { this.Request.Headers, request_Id, cookie, version, country, locale, tenant, payload });
            var json = BeeRock.Core.M4dzhfiw5nzoControllerNS.RedirectCalls.HandleWithResponse("MRefundPOST2178", p);
            return System.Threading.Tasks.Task.FromResult(Newtonsoft.Json.JsonConvert.DeserializeObject<RefundTransactionResponse>(json));

        }

        /// <summary>
        /// Get all transactions
        /// </summary>
        /// <remarks>
        /// This API will return the list of transaction matched with filter criteria
        /// </remarks>
        /// <param name="version">Version</param>
        /// <param name="country">Country</param>
        /// <param name="locale">Locale</param>
        /// <param name="tenant">Tenant</param>
        /// <param name="userId">User Id</param>
        /// <param name="customerType">Customer Type</param>
        /// <param name="serviceInstanceNumber">Service Instance Number</param>
        /// <param name="paymentReferenceNumber">Payment Reference Number</param>
        /// <param name="intId">Init ID</param>
        /// <param name="uUID">UUID</param>
        /// <param name="startDate">Transaction create date starting from</param>
        /// <param name="endDate">Transaction create date until to</param>
        /// <param name="transactionType">Type of Transaction eg. payment, refund</param>
        /// <param name="status">Transaction Status eg. PENDING, SUCCESS, FAILURE, etc.</param>
        /// <param name="page">Pagination - page number</param>
        /// <param name="pgeSize">Pagination - size of the page</param>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("{version}/{country}/{locale}/{tenant}/external/transactions", Name = "transactions")]
        public System.Threading.Tasks.Task<Response6> MTransactions2208(string version, string country, string locale, string tenant, [Microsoft.AspNetCore.Mvc.FromQuery] string userId, [Microsoft.AspNetCore.Mvc.FromQuery] string customerType, [Microsoft.AspNetCore.Mvc.FromQuery] string serviceInstanceNumber, [Microsoft.AspNetCore.Mvc.FromQuery] string paymentReferenceNumber, [Microsoft.AspNetCore.Mvc.FromQuery] string intId, [Microsoft.AspNetCore.Mvc.FromQuery] string uUID, [Microsoft.AspNetCore.Mvc.FromQuery] string startDate, [Microsoft.AspNetCore.Mvc.FromQuery] string endDate, [Microsoft.AspNetCore.Mvc.FromQuery] string transactionType, [Microsoft.AspNetCore.Mvc.FromQuery] string status, [Microsoft.AspNetCore.Mvc.FromQuery] string page, [Microsoft.AspNetCore.Mvc.FromQuery] string pgeSize)
        {

            var p = BeeRock.Core.M4dzhfiw5nzoControllerNS.RedirectCalls.CreateParameter( new string[] { "header", "version","country","locale","tenant","userId","customerType","serviceInstanceNumber","paymentReferenceNumber","intId","uUID","startDate","endDate","transactionType","status","page","pgeSize" }, new object[] { this.Request.Headers, version, country, locale, tenant, userId, customerType, serviceInstanceNumber, paymentReferenceNumber, intId, uUID, startDate, endDate, transactionType, status, page, pgeSize });
            var json = BeeRock.Core.M4dzhfiw5nzoControllerNS.RedirectCalls.HandleWithResponse("MTransactions2208", p);
            return System.Threading.Tasks.Task.FromResult(Newtonsoft.Json.JsonConvert.DeserializeObject<Response6>(json));

        }

        /// <summary>
        /// Iniates the transactions report processing
        /// </summary>
        /// <remarks>
        /// This API is used to iniate the transaction report generation and send the file id
        /// </remarks>
        /// <param name="version">Version</param>
        /// <param name="country">Country</param>
        /// <param name="locale">Locale</param>
        /// <param name="tenant">Tenant</param>
        /// <param name="customer_id">Customer ID</param>
        /// <param name="customer_type">Customer Type</param>
        /// <param name="service_instance_number">Service Instance Number</param>
        /// <param name="payment_reference_number">Payment Reference Number</param>
        /// <param name="int_id">Int ID</param>
        /// <param name="uuid">UUID</param>
        /// <param name="start_date">Start Date YYYY-MM-DD</param>
        /// <param name="end_date">End Date YYYY-MM-DD</param>
        /// <param name="transaction_type">Transaction Type</param>
        /// <param name="status">Status</param>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("{version}/{country}/{locale}/{tenant}/external/transactions/report/generate", Name = "generate")]
        public System.Threading.Tasks.Task<Response7> MGenerate2236(string version, string country, string locale, string tenant, [Microsoft.AspNetCore.Mvc.FromQuery] string customer_id, [Microsoft.AspNetCore.Mvc.FromQuery] string customer_type, [Microsoft.AspNetCore.Mvc.FromQuery] string service_instance_number, [Microsoft.AspNetCore.Mvc.FromQuery] string payment_reference_number, [Microsoft.AspNetCore.Mvc.FromQuery] string int_id, [Microsoft.AspNetCore.Mvc.FromQuery] string uuid, [Microsoft.AspNetCore.Mvc.FromQuery] string start_date, [Microsoft.AspNetCore.Mvc.FromQuery] string end_date, [Microsoft.AspNetCore.Mvc.FromQuery] string transaction_type, [Microsoft.AspNetCore.Mvc.FromQuery] string status)
        {

            var p = BeeRock.Core.M4dzhfiw5nzoControllerNS.RedirectCalls.CreateParameter( new string[] { "header", "version","country","locale","tenant","customer_id","customer_type","service_instance_number","payment_reference_number","int_id","uuid","start_date","end_date","transaction_type","status" }, new object[] { this.Request.Headers, version, country, locale, tenant, customer_id, customer_type, service_instance_number, payment_reference_number, int_id, uuid, start_date, end_date, transaction_type, status });
            var json = BeeRock.Core.M4dzhfiw5nzoControllerNS.RedirectCalls.HandleWithResponse("MGenerate2236", p);
            return System.Threading.Tasks.Task.FromResult(Newtonsoft.Json.JsonConvert.DeserializeObject<Response7>(json));

        }

        /// <summary>
        /// Download transaction report generated
        /// </summary>
        /// <remarks>
        /// This API is used to download the transaction report generated
        /// </remarks>
        /// <param name="version">Version</param>
        /// <param name="country">Country</param>
        /// <param name="locale">Locale</param>
        /// <param name="tenant">Tenant</param>
        /// <param name="file_id">File Id</param>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("{version}/{country}/{locale}/{tenant}/external/transactions/report/{file_id}/download", Name = "download")]
        public System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.FileContentResult> MDownload2255(string version, string country, string locale, string tenant, string file_id)
        {

            var p = BeeRock.Core.M4dzhfiw5nzoControllerNS.RedirectCalls.CreateParameter( new string[] { "header", "version","country","locale","tenant","file_id" }, new object[] { this.Request.Headers, version, country, locale, tenant, file_id });
            var json = BeeRock.Core.M4dzhfiw5nzoControllerNS.RedirectCalls.HandleWithFileResponse("MDownload2255", p);
            return System.Threading.Tasks.Task.FromResult(json);

        }

        /// <summary>
        /// Checks transaction status
        /// </summary>
        /// <remarks>
        /// This API is used to check the status of a transaction report
        /// </remarks>
        /// <param name="version">Version</param>
        /// <param name="country">Country</param>
        /// <param name="locale">Locale</param>
        /// <param name="tenant">Tenant</param>
        /// <param name="file_id">file_id</param>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("{version}/{country}/{locale}/{tenant}/external/transactions/report/{file_id}/status", Name = "statusGET5")]
        public System.Threading.Tasks.Task<Response8> MStatusGET52274(string version, string country, string locale, string tenant, string file_id)
        {

            var p = BeeRock.Core.M4dzhfiw5nzoControllerNS.RedirectCalls.CreateParameter( new string[] { "header", "version","country","locale","tenant","file_id" }, new object[] { this.Request.Headers, version, country, locale, tenant, file_id });
            var json = BeeRock.Core.M4dzhfiw5nzoControllerNS.RedirectCalls.HandleWithResponse("MStatusGET52274", p);
            return System.Threading.Tasks.Task.FromResult(Newtonsoft.Json.JsonConvert.DeserializeObject<Response8>(json));

        }

        /// <summary>
        /// generates paylink
        /// </summary>
        /// <remarks>
        /// This API will generate paylink for outstanding bills
        /// </remarks>
        /// <param name="request_Id">Request ID</param>
        /// <param name="version">Version</param>
        /// <param name="country">Country</param>
        /// <param name="tenant">Tenant</param>
        /// <param name="locale">Locale</param>
        /// <param name="user_id">userId</param>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("{version}/{country}/{locale}/{tenant}/external/users/{user_id}/paylink", Name = "paylinkGET3")]
        public System.Threading.Tasks.Task<GeneratePaylinkResponse> MPaylinkGET32294([Microsoft.AspNetCore.Mvc.FromHeader(Name = "Request-Id")] string request_Id, string version, string country, string tenant, string locale, string user_id)
        {

            var p = BeeRock.Core.M4dzhfiw5nzoControllerNS.RedirectCalls.CreateParameter( new string[] { "header", "request_Id","version","country","tenant","locale","user_id" }, new object[] { this.Request.Headers, request_Id, version, country, tenant, locale, user_id });
            var json = BeeRock.Core.M4dzhfiw5nzoControllerNS.RedirectCalls.HandleWithResponse("MPaylinkGET32294", p);
            return System.Threading.Tasks.Task.FromResult(Newtonsoft.Json.JsonConvert.DeserializeObject<GeneratePaylinkResponse>(json));

        }

        /// <summary>
        /// credit-card expiry status
        /// </summary>
        /// <remarks>
        /// This API returns whether is credit-card is nearing expiry or is expired
        /// </remarks>
        /// <param name="request_Id">Request ID</param>
        /// <param name="version">Version</param>
        /// <param name="country">Country</param>
        /// <param name="locale">Locale</param>
        /// <param name="tenant">Tenant</param>
        /// <param name="sIN">SIN</param>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("{version}/{country}/{locale}/{tenant}/internal/account/{SIN}/credit-card", Name = "credit-card")]
        public System.Threading.Tasks.Task<CreditCardExpiryStatusResponse> MCreditCard2314([Microsoft.AspNetCore.Mvc.FromHeader(Name = "Request-Id")] string request_Id, string version, string country, string locale, string tenant, string sIN)
        {

            var p = BeeRock.Core.M4dzhfiw5nzoControllerNS.RedirectCalls.CreateParameter( new string[] { "header", "request_Id","version","country","locale","tenant","sIN" }, new object[] { this.Request.Headers, request_Id, version, country, locale, tenant, sIN });
            var json = BeeRock.Core.M4dzhfiw5nzoControllerNS.RedirectCalls.HandleWithResponse("MCreditCard2314", p);
            return System.Threading.Tasks.Task.FromResult(Newtonsoft.Json.JsonConvert.DeserializeObject<CreditCardExpiryStatusResponse>(json));

        }

        /// <summary>
        /// payment callback
        /// </summary>
        /// <remarks>
        /// This API will process payment callback events from connector
        /// </remarks>
        /// <param name="request_Id">Request ID</param>
        /// <param name="version">Version</param>
        /// <param name="country">Country</param>
        /// <param name="tenant">Tenant</param>
        /// <param name="locale">Locale</param>
        /// <param name="payload">Request Payload</param>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("{version}/{country}/{locale}/{tenant}/internal/call-back/payment", Name = "payment")]
        public System.Threading.Tasks.Task MPayment2334([Microsoft.AspNetCore.Mvc.FromHeader(Name = "Request-Id")] string request_Id, string version, string country, string tenant, string locale, [Microsoft.AspNetCore.Mvc.FromBody] Payload payload)
        {

            var p = BeeRock.Core.M4dzhfiw5nzoControllerNS.RedirectCalls.CreateParameter( new string[] { "header", "request_Id","version","country","tenant","locale","payload" }, new object[] { this.Request.Headers, request_Id, version, country, tenant, locale, payload });
            var json = BeeRock.Core.M4dzhfiw5nzoControllerNS.RedirectCalls.HandleWithResponse("MPayment2334", p);
            return System.Threading.Tasks.Task.CompletedTask;

        }

        /// <summary>
        /// payment method attached callback
        /// </summary>
        /// <remarks>
        /// This API will process payment method callback events from connector
        /// </remarks>
        /// <param name="request_Id">Request ID</param>
        /// <param name="version">Version</param>
        /// <param name="country">Country</param>
        /// <param name="tenant">Tenant</param>
        /// <param name="locale">Locale</param>
        /// <param name="payload">Request Payload</param>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("{version}/{country}/{locale}/{tenant}/internal/call-back/payment-method-attached", Name = "payment-method-attached")]
        public System.Threading.Tasks.Task MPaymentMethodAttached2354([Microsoft.AspNetCore.Mvc.FromHeader(Name = "Request-Id")] string request_Id, string version, string country, string tenant, string locale, [Microsoft.AspNetCore.Mvc.FromBody] Payload2 payload)
        {

            var p = BeeRock.Core.M4dzhfiw5nzoControllerNS.RedirectCalls.CreateParameter( new string[] { "header", "request_Id","version","country","tenant","locale","payload" }, new object[] { this.Request.Headers, request_Id, version, country, tenant, locale, payload });
            var json = BeeRock.Core.M4dzhfiw5nzoControllerNS.RedirectCalls.HandleWithResponse("MPaymentMethodAttached2354", p);
            return System.Threading.Tasks.Task.CompletedTask;

        }

        /// <summary>
        /// refund callback
        /// </summary>
        /// <remarks>
        /// This API will process refund callback events from connector
        /// </remarks>
        /// <param name="request_Id">Request ID</param>
        /// <param name="version">Version</param>
        /// <param name="country">Country</param>
        /// <param name="tenant">Tenant</param>
        /// <param name="locale">Locale</param>
        /// <param name="payload">Request Payload</param>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("{version}/{country}/{locale}/{tenant}/internal/call-back/refund", Name = "refundPOST2")]
        public System.Threading.Tasks.Task MRefundPOST22374([Microsoft.AspNetCore.Mvc.FromHeader(Name = "Request-Id")] string request_Id, string version, string country, string tenant, string locale, [Microsoft.AspNetCore.Mvc.FromBody] Payload3 payload)
        {

            var p = BeeRock.Core.M4dzhfiw5nzoControllerNS.RedirectCalls.CreateParameter( new string[] { "header", "request_Id","version","country","tenant","locale","payload" }, new object[] { this.Request.Headers, request_Id, version, country, tenant, locale, payload });
            var json = BeeRock.Core.M4dzhfiw5nzoControllerNS.RedirectCalls.HandleWithResponse("MRefundPOST22374", p);
            return System.Threading.Tasks.Task.CompletedTask;

        }

        /// <summary>
        /// process manual payment request from billing service
        /// </summary>
        /// <remarks>
        /// This API add a new transaction with transaction type as MANUAL_PAYMENT and returns the transaction id
        /// </remarks>
        /// <param name="request_Id">Request ID</param>
        /// <param name="version">Version</param>
        /// <param name="country">Country</param>
        /// <param name="locale">Locale</param>
        /// <param name="tenant">Tenant</param>
        /// <param name="paymentRequest">Payload</param>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("{version}/{country}/{locale}/{tenant}/internal/payment/manual", Name = "manual")]
        public System.Threading.Tasks.Task<ManualPayementReponse> MManual2394([Microsoft.AspNetCore.Mvc.FromHeader(Name = "Request-Id")] string request_Id, string version, string country, string locale, string tenant, [Microsoft.AspNetCore.Mvc.FromBody] ManualPaymentRequest paymentRequest)
        {

            var p = BeeRock.Core.M4dzhfiw5nzoControllerNS.RedirectCalls.CreateParameter( new string[] { "header", "request_Id","version","country","locale","tenant","paymentRequest" }, new object[] { this.Request.Headers, request_Id, version, country, locale, tenant, paymentRequest });
            var json = BeeRock.Core.M4dzhfiw5nzoControllerNS.RedirectCalls.HandleWithResponse("MManual2394", p);
            return System.Threading.Tasks.Task.FromResult(Newtonsoft.Json.JsonConvert.DeserializeObject<ManualPayementReponse>(json));

        }

        /// <summary>
        /// process recurrent payment
        /// </summary>
        /// <remarks>
        /// This API processes recurrent requests and returns payment details
        /// </remarks>
        /// <param name="request_Id">Request ID</param>
        /// <param name="version">Version</param>
        /// <param name="country">Country</param>
        /// <param name="locale">Locale</param>
        /// <param name="tenant">Tenant</param>
        /// <param name="paymentRequest">Payload</param>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("{version}/{country}/{locale}/{tenant}/internal/payment/recurrent", Name = "recurrent")]
        public System.Threading.Tasks.Task<Response9> MRecurrent2414([Microsoft.AspNetCore.Mvc.FromHeader(Name = "Request-Id")] string request_Id, string version, string country, string locale, string tenant, [Microsoft.AspNetCore.Mvc.FromBody] RecurrentPaymentRequest paymentRequest)
        {

            var p = BeeRock.Core.M4dzhfiw5nzoControllerNS.RedirectCalls.CreateParameter( new string[] { "header", "request_Id","version","country","locale","tenant","paymentRequest" }, new object[] { this.Request.Headers, request_Id, version, country, locale, tenant, paymentRequest });
            var json = BeeRock.Core.M4dzhfiw5nzoControllerNS.RedirectCalls.HandleWithResponse("MRecurrent2414", p);
            return System.Threading.Tasks.Task.FromResult(Newtonsoft.Json.JsonConvert.DeserializeObject<Response9>(json));

        }

        /// <summary>
        /// process upfront payment
        /// </summary>
        /// <remarks>
        /// This API processes upfront requests and returns payment details
        /// </remarks>
        /// <param name="request_Id">Request ID</param>
        /// <param name="version">Version</param>
        /// <param name="country">Country</param>
        /// <param name="locale">Locale</param>
        /// <param name="tenant">Tenant</param>
        /// <param name="paymentRequest">Payload</param>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("{version}/{country}/{locale}/{tenant}/internal/payment/upfront", Name = "upfront2")]
        public System.Threading.Tasks.Task<UpfrontPaymentResponse> MUpfront22434([Microsoft.AspNetCore.Mvc.FromHeader(Name = "Request-Id")] string request_Id, string version, string country, string locale, string tenant, [Microsoft.AspNetCore.Mvc.FromBody] UpfrontPaymentRequest paymentRequest)
        {

            var p = BeeRock.Core.M4dzhfiw5nzoControllerNS.RedirectCalls.CreateParameter( new string[] { "header", "request_Id","version","country","locale","tenant","paymentRequest" }, new object[] { this.Request.Headers, request_Id, version, country, locale, tenant, paymentRequest });
            var json = BeeRock.Core.M4dzhfiw5nzoControllerNS.RedirectCalls.HandleWithResponse("MUpfront22434", p);
            return System.Threading.Tasks.Task.FromResult(Newtonsoft.Json.JsonConvert.DeserializeObject<UpfrontPaymentResponse>(json));

        }

        /// <summary>
        /// internally process refund transaction witjout cookie validation
        /// </summary>
        /// <remarks>
        /// This API processes refund of an existing transaction and return refund transaction id
        /// </remarks>
        /// <param name="request_Id">Request ID</param>
        /// <param name="version">Version</param>
        /// <param name="country">Country</param>
        /// <param name="locale">Locale</param>
        /// <param name="tenant">Tenant</param>
        /// <param name="payload">Payload</param>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("{version}/{country}/{locale}/{tenant}/internal/refund", Name = "refundPOST3")]
        public System.Threading.Tasks.Task<InternalRefundTransactionResponse> MRefundPOST32454([Microsoft.AspNetCore.Mvc.FromHeader(Name = "Request-Id")] string request_Id, string version, string country, string locale, string tenant, [Microsoft.AspNetCore.Mvc.FromBody] InternalRefundTransactionRequest payload)
        {

            var p = BeeRock.Core.M4dzhfiw5nzoControllerNS.RedirectCalls.CreateParameter( new string[] { "header", "request_Id","version","country","locale","tenant","payload" }, new object[] { this.Request.Headers, request_Id, version, country, locale, tenant, payload });
            var json = BeeRock.Core.M4dzhfiw5nzoControllerNS.RedirectCalls.HandleWithResponse("MRefundPOST32454", p);
            return System.Threading.Tasks.Task.FromResult(Newtonsoft.Json.JsonConvert.DeserializeObject<InternalRefundTransactionResponse>(json));

        }

        /// <summary>
        /// Get customer transactions
        /// </summary>
        /// <remarks>
        /// This API will return the list of customer transaction matched with filter criteria
        /// </remarks>
        /// <param name="version">Version</param>
        /// <param name="country">Country</param>
        /// <param name="locale">Locale</param>
        /// <param name="tenant">Tenant</param>
        /// <param name="userId">User Id</param>
        /// <param name="startDate">Transaction create date starting from</param>
        /// <param name="endDate">Transaction create date until to</param>
        /// <param name="transactionType">Type of Transaction eg. payment, refund</param>
        /// <param name="status">Transaction Status eg. PENDING, SUCCESS, FAILURE, etc.</param>
        /// <param name="page">Pagination - page number</param>
        /// <param name="pgeSize">Pagination - size of the page</param>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("{version}/{country}/{locale}/{tenant}/internal/transactions", Name = "transactions2")]
        public System.Threading.Tasks.Task<Response10> MTransactions22479(string version, string country, string locale, string tenant, [Microsoft.AspNetCore.Mvc.FromQuery] string userId, [Microsoft.AspNetCore.Mvc.FromQuery] string startDate, [Microsoft.AspNetCore.Mvc.FromQuery] string endDate, [Microsoft.AspNetCore.Mvc.FromQuery] string transactionType, [Microsoft.AspNetCore.Mvc.FromQuery] string status, [Microsoft.AspNetCore.Mvc.FromQuery] string page, [Microsoft.AspNetCore.Mvc.FromQuery] string pgeSize)
        {

            var p = BeeRock.Core.M4dzhfiw5nzoControllerNS.RedirectCalls.CreateParameter( new string[] { "header", "version","country","locale","tenant","userId","startDate","endDate","transactionType","status","page","pgeSize" }, new object[] { this.Request.Headers, version, country, locale, tenant, userId, startDate, endDate, transactionType, status, page, pgeSize });
            var json = BeeRock.Core.M4dzhfiw5nzoControllerNS.RedirectCalls.HandleWithResponse("MTransactions22479", p);
            return System.Threading.Tasks.Task.FromResult(Newtonsoft.Json.JsonConvert.DeserializeObject<Response10>(json));

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public interface ILastController
    {

        /// <summary>
        /// Get payment instrument last success
        /// </summary>

        /// <remarks>
        /// This API will return the payment instrument of last success transaction or last failed if there weren't any success
        /// </remarks>

        /// <param name="country">Country</param>

        /// <param name="locale">Locale</param>

        /// <param name="tenant">Tenant</param>

        /// <param name="sSearchStr">sSearchStr eg, LW123234404</param>

        /// <param name="sSearchType">sSearchType eg, customer_account_number</param>

        /// <returns>OK</returns>

        [System.Obsolete]

        System.Threading.Tasks.Task<PaymentStatusResponse> MSuccessAsync2513(string country, string locale, string tenant, string sSearchStr, string sSearchType);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]

    public partial class LastController : Microsoft.AspNetCore.Mvc.ControllerBase
    {
        private ILastController _implementation;

        public LastController()
        {

        }

        /// <summary>
        /// Get payment instrument last success
        /// </summary>
        /// <remarks>
        /// This API will return the payment instrument of last success transaction or last failed if there weren't any success
        /// </remarks>
        /// <param name="country">Country</param>
        /// <param name="locale">Locale</param>
        /// <param name="tenant">Tenant</param>
        /// <param name="sSearchStr">sSearchStr eg, LW123234404</param>
        /// <param name="sSearchType">sSearchType eg, customer_account_number</param>
        /// <returns>OK</returns>
        [System.Obsolete]
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("v3/{country}/{locale}/{tenant}/payment_instrument/last_success", Name = "last_success")]
        public System.Threading.Tasks.Task<PaymentStatusResponse> MSuccess2542(string country, string locale, string tenant, [Microsoft.AspNetCore.Mvc.FromQuery] string sSearchStr, [Microsoft.AspNetCore.Mvc.FromQuery] string sSearchType)
        {

            var p = BeeRock.Core.M4dzhfiw5nzoControllerNS.RedirectCalls.CreateParameter( new string[] { "header", "country","locale","tenant","sSearchStr","sSearchType" }, new object[] { this.Request.Headers, country, locale, tenant, sSearchStr, sSearchType });
            var json = BeeRock.Core.M4dzhfiw5nzoControllerNS.RedirectCalls.HandleWithResponse("MSuccess2542", p);
            return System.Threading.Tasks.Task.FromResult(Newtonsoft.Json.JsonConvert.DeserializeObject<PaymentStatusResponse>(json));

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public interface ICardController
    {

        /// <summary>
        /// update credit card
        /// </summary>

        /// <remarks>
        /// end point which web-front/mobile call to initiate cc update
        /// </remarks>

        /// <param name="country">Country</param>

        /// <param name="locale">Locale</param>

        /// <param name="tenant">Tenant</param>

        /// <param name="paymentRequest">Payload</param>

        /// <returns>OK</returns>

        [System.Obsolete]

        System.Threading.Tasks.Task<PaymentRequestResponse> MDetailsAsync2574(string country, string locale, string tenant, AsyncPaymentRequest paymentRequest);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]

    public partial class CardController : Microsoft.AspNetCore.Mvc.ControllerBase
    {
        private ICardController _implementation;

        public CardController()
        {

        }

        /// <summary>
        /// update credit card
        /// </summary>
        /// <remarks>
        /// end point which web-front/mobile call to initiate cc update
        /// </remarks>
        /// <param name="country">Country</param>
        /// <param name="locale">Locale</param>
        /// <param name="tenant">Tenant</param>
        /// <param name="paymentRequest">Payload</param>
        /// <returns>OK</returns>
        [System.Obsolete]
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("v3/{tenant}/{country}/payment/save_and_get_card_details", Name = "save_and_get_card_details")]
        public System.Threading.Tasks.Task<PaymentRequestResponse> MDetails2602(string country, string locale, string tenant, [Microsoft.AspNetCore.Mvc.FromBody] AsyncPaymentRequest paymentRequest)
        {

            var p = BeeRock.Core.M4dzhfiw5nzoControllerNS.RedirectCalls.CreateParameter( new string[] { "header", "country","locale","tenant","paymentRequest" }, new object[] { this.Request.Headers, country, locale, tenant, paymentRequest });
            var json = BeeRock.Core.M4dzhfiw5nzoControllerNS.RedirectCalls.HandleWithResponse("MDetails2602", p);
            return System.Threading.Tasks.Task.FromResult(Newtonsoft.Json.JsonConvert.DeserializeObject<PaymentRequestResponse>(json));

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PAASResult
    {
        [Newtonsoft.Json.JsonProperty("card_bin", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Card_bin { get; set; }

        [Newtonsoft.Json.JsonProperty("card_expiry_date", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Card_expiry_date { get; set; }

        [Newtonsoft.Json.JsonProperty("card_no", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Card_no { get; set; }

        [Newtonsoft.Json.JsonProperty("card_payment_method", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Card_payment_method { get; set; }

        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Currency { get; set; }

        [Newtonsoft.Json.JsonProperty("default", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Default { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("payment_gateway", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Payment_gateway { get; set; }

        [Newtonsoft.Json.JsonProperty("paytype", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Paytype { get; set; }

        [Newtonsoft.Json.JsonProperty("recurrent_token", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Recurrent_token { get; set; }

        [Newtonsoft.Json.JsonProperty("service_instance_number", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Service_instance_number { get; set; }

        [Newtonsoft.Json.JsonProperty("shopper_reference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Shopper_reference { get; set; }

        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Status { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AdditionalDataAddress
    {
        [Newtonsoft.Json.JsonProperty("city", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string City { get; set; }

        [Newtonsoft.Json.JsonProperty("country_code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Country_code { get; set; }

        [Newtonsoft.Json.JsonProperty("line_1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Line_1 { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("post_code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Post_code { get; set; }

        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string State { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AdditionalDataCustomer
    {
        [Newtonsoft.Json.JsonProperty("contact_number", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Contact_number { get; set; }

        [Newtonsoft.Json.JsonProperty("first_name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string First_name { get; set; }

        [Newtonsoft.Json.JsonProperty("last_name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Last_name { get; set; }

        [Newtonsoft.Json.JsonProperty("user_email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string User_email { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AdditionalDataOrderedItems
    {
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Amount { get; set; }

        [Newtonsoft.Json.JsonProperty("is_gift_card", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Is_gift_card { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("quantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Quantity { get; set; }

        [Newtonsoft.Json.JsonProperty("requires_shipping", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Requires_shipping { get; set; }

        [Newtonsoft.Json.JsonProperty("unit_price", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Unit_price { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PaymentRequestAdditionalData
    {
        [Newtonsoft.Json.JsonProperty("amazon_order_reference_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Amazon_order_reference_id { get; set; }

        [Newtonsoft.Json.JsonProperty("billing_address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AdditionalDataAddress Billing_address { get; set; }

        [Newtonsoft.Json.JsonProperty("cancel_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Cancel_url { get; set; }

        [Newtonsoft.Json.JsonProperty("card_type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Card_type { get; set; }

        [Newtonsoft.Json.JsonProperty("custom_payment_method", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Custom_payment_method { get; set; }

        [Newtonsoft.Json.JsonProperty("customer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AdditionalDataCustomer Customer { get; set; }

        [Newtonsoft.Json.JsonProperty("delivery_method", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Delivery_method { get; set; }

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("failure_redirect_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Failure_redirect_url { get; set; }

        [Newtonsoft.Json.JsonProperty("failure_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Failure_url { get; set; }

        [Newtonsoft.Json.JsonProperty("first_six_digits", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string First_six_digits { get; set; }

        [Newtonsoft.Json.JsonProperty("last_four_digits", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Last_four_digits { get; set; }

        [Newtonsoft.Json.JsonProperty("order_lines", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<AdditionalDataOrderedItems> Order_lines { get; set; }

        [Newtonsoft.Json.JsonProperty("payment_methods", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> Payment_methods { get; set; }

        [Newtonsoft.Json.JsonProperty("payment_terms", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Payment_terms { get; set; }

        [Newtonsoft.Json.JsonProperty("referral_method", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Referral_method { get; set; }

        [Newtonsoft.Json.JsonProperty("referrer_user_name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Referrer_user_name { get; set; }

        [Newtonsoft.Json.JsonProperty("return_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Return_url { get; set; }

        [Newtonsoft.Json.JsonProperty("secondary_phone_number", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Secondary_phone_number { get; set; }

        [Newtonsoft.Json.JsonProperty("shipping_address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AdditionalDataAddress Shipping_address { get; set; }

        [Newtonsoft.Json.JsonProperty("success_redirect_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Success_redirect_url { get; set; }

        [Newtonsoft.Json.JsonProperty("token", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Token { get; set; }

        [Newtonsoft.Json.JsonProperty("user_email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string User_email { get; set; }

        [Newtonsoft.Json.JsonProperty("user_name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string User_name { get; set; }

        [Newtonsoft.Json.JsonProperty("valid_duration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Valid_duration { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PaymentRequestInstrumentData
    {
        [Newtonsoft.Json.JsonProperty("merchant_account", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Merchant_account { get; set; }

        [Newtonsoft.Json.JsonProperty("order_ref", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Order_ref { get; set; }

        [Newtonsoft.Json.JsonProperty("origin", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Origin { get; set; }

        [Newtonsoft.Json.JsonProperty("redirect_from_issuer_method", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Redirect_from_issuer_method { get; set; }

        [Newtonsoft.Json.JsonProperty("redirect_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Redirect_url { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PaymentOptions
    {
        [Newtonsoft.Json.JsonProperty("auto_rescue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Auto_rescue { get; set; }

        [Newtonsoft.Json.JsonProperty("card_type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Card_type { get; set; }

        [Newtonsoft.Json.JsonProperty("first_six_digits", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string First_six_digits { get; set; }

        [Newtonsoft.Json.JsonProperty("gateway", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Gateway { get; set; }

        [Newtonsoft.Json.JsonProperty("last_four_digits", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Last_four_digits { get; set; }

        [Newtonsoft.Json.JsonProperty("psp_reference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Psp_reference { get; set; }

        [Newtonsoft.Json.JsonProperty("recurrent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Recurrent { get; set; }

        [Newtonsoft.Json.JsonProperty("token", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Token { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PaymentStatusResponse
    {
        [Newtonsoft.Json.JsonProperty("approval_code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Approval_code { get; set; }

        [Newtonsoft.Json.JsonProperty("card_num", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Card_num { get; set; }

        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Code { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("order_ref", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Order_ref { get; set; }

        [Newtonsoft.Json.JsonProperty("payment_options", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PaymentOptions Payment_options { get; set; }

        [Newtonsoft.Json.JsonProperty("payment_status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Payment_status { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TransactionListResponse
    {
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Code { get; set; }

        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<TransactionListModel> Data { get; set; }

        [Newtonsoft.Json.JsonProperty("iTotalDisplayRecords", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ITotalDisplayRecords { get; set; }

        [Newtonsoft.Json.JsonProperty("iTotalRecords", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ITotalRecords { get; set; }

        [Newtonsoft.Json.JsonProperty("transaction_list", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<TransactionListModel> Transaction_list { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AdditionalDataAddress2
    {
        [Newtonsoft.Json.JsonProperty("city", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string City { get; set; }

        [Newtonsoft.Json.JsonProperty("country_code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Country_code { get; set; }

        [Newtonsoft.Json.JsonProperty("line_1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Line_1 { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("post_code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Post_code { get; set; }

        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string State { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AdditionalDataCustomer2
    {
        [Newtonsoft.Json.JsonProperty("contact_number", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Contact_number { get; set; }

        [Newtonsoft.Json.JsonProperty("first_name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string First_name { get; set; }

        [Newtonsoft.Json.JsonProperty("last_name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Last_name { get; set; }

        [Newtonsoft.Json.JsonProperty("user_email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string User_email { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AdditionalDataOrderedItems2
    {
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Amount { get; set; }

        [Newtonsoft.Json.JsonProperty("is_gift_card", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Is_gift_card { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("quantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Quantity { get; set; }

        [Newtonsoft.Json.JsonProperty("requires_shipping", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Requires_shipping { get; set; }

        [Newtonsoft.Json.JsonProperty("unit_price", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Unit_price { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PaymentRequestAdditionalData2
    {
        [Newtonsoft.Json.JsonProperty("amazon_order_reference_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Amazon_order_reference_id { get; set; }

        [Newtonsoft.Json.JsonProperty("billing_address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AdditionalDataAddress2 Billing_address { get; set; }

        [Newtonsoft.Json.JsonProperty("cancel_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Cancel_url { get; set; }

        [Newtonsoft.Json.JsonProperty("card_type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Card_type { get; set; }

        [Newtonsoft.Json.JsonProperty("custom_payment_method", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Custom_payment_method { get; set; }

        [Newtonsoft.Json.JsonProperty("customer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AdditionalDataCustomer2 Customer { get; set; }

        [Newtonsoft.Json.JsonProperty("delivery_method", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Delivery_method { get; set; }

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("failure_redirect_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Failure_redirect_url { get; set; }

        [Newtonsoft.Json.JsonProperty("failure_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Failure_url { get; set; }

        [Newtonsoft.Json.JsonProperty("first_six_digits", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string First_six_digits { get; set; }

        [Newtonsoft.Json.JsonProperty("last_four_digits", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Last_four_digits { get; set; }

        [Newtonsoft.Json.JsonProperty("order_lines", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<AdditionalDataOrderedItems2> Order_lines { get; set; }

        [Newtonsoft.Json.JsonProperty("payment_methods", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> Payment_methods { get; set; }

        [Newtonsoft.Json.JsonProperty("payment_terms", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Payment_terms { get; set; }

        [Newtonsoft.Json.JsonProperty("referral_method", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Referral_method { get; set; }

        [Newtonsoft.Json.JsonProperty("referrer_user_name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Referrer_user_name { get; set; }

        [Newtonsoft.Json.JsonProperty("return_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Return_url { get; set; }

        [Newtonsoft.Json.JsonProperty("secondary_phone_number", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Secondary_phone_number { get; set; }

        [Newtonsoft.Json.JsonProperty("shipping_address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AdditionalDataAddress2 Shipping_address { get; set; }

        [Newtonsoft.Json.JsonProperty("success_redirect_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Success_redirect_url { get; set; }

        [Newtonsoft.Json.JsonProperty("token", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Token { get; set; }

        [Newtonsoft.Json.JsonProperty("user_email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string User_email { get; set; }

        [Newtonsoft.Json.JsonProperty("user_name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string User_name { get; set; }

        [Newtonsoft.Json.JsonProperty("valid_duration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Valid_duration { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PaymentRequestInstrumentData2
    {
        [Newtonsoft.Json.JsonProperty("merchant_account", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Merchant_account { get; set; }

        [Newtonsoft.Json.JsonProperty("order_ref", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Order_ref { get; set; }

        [Newtonsoft.Json.JsonProperty("origin", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Origin { get; set; }

        [Newtonsoft.Json.JsonProperty("redirect_from_issuer_method", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Redirect_from_issuer_method { get; set; }

        [Newtonsoft.Json.JsonProperty("redirect_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Redirect_url { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PaymentOptions2
    {
        [Newtonsoft.Json.JsonProperty("auto_rescue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Auto_rescue { get; set; }

        [Newtonsoft.Json.JsonProperty("card_type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Card_type { get; set; }

        [Newtonsoft.Json.JsonProperty("first_six_digits", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string First_six_digits { get; set; }

        [Newtonsoft.Json.JsonProperty("gateway", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Gateway { get; set; }

        [Newtonsoft.Json.JsonProperty("last_four_digits", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Last_four_digits { get; set; }

        [Newtonsoft.Json.JsonProperty("psp_reference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Psp_reference { get; set; }

        [Newtonsoft.Json.JsonProperty("recurrent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Recurrent { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PaymentStatusResponse2
    {
        [Newtonsoft.Json.JsonProperty("approval_code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Approval_code { get; set; }

        [Newtonsoft.Json.JsonProperty("card_num", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Card_num { get; set; }

        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Code { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("order_ref", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Order_ref { get; set; }

        [Newtonsoft.Json.JsonProperty("payment_options", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PaymentOptions2 Payment_options { get; set; }

        [Newtonsoft.Json.JsonProperty("payment_status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Payment_status { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TransactionListResponse2
    {
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Code { get; set; }

        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<TransactionListModel2> Data { get; set; }

        [Newtonsoft.Json.JsonProperty("iTotalDisplayRecords", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ITotalDisplayRecords { get; set; }

        [Newtonsoft.Json.JsonProperty("iTotalRecords", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ITotalRecords { get; set; }

        [Newtonsoft.Json.JsonProperty("transaction_list", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<TransactionListModel2> Transaction_list { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LoadCustomerPaymentInfoResponse
    {
        [Newtonsoft.Json.JsonProperty("card_type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Card_type { get; set; }

        [Newtonsoft.Json.JsonProperty("customer_account_number", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Customer_account_number { get; set; }

        [Newtonsoft.Json.JsonProperty("customer_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Customer_id { get; set; }

        [Newtonsoft.Json.JsonProperty("first_six_digits", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string First_six_digits { get; set; }

        [Newtonsoft.Json.JsonProperty("gateway", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Gateway { get; set; }

        [Newtonsoft.Json.JsonProperty("last_four_digits", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Last_four_digits { get; set; }

        [Newtonsoft.Json.JsonProperty("order_ref", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Order_ref { get; set; }

        [Newtonsoft.Json.JsonProperty("shopper_reference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Shopper_reference { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class HealthStatus
    {
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Status { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LatitudeVerificationRequest
    {
        [Newtonsoft.Json.JsonProperty("gateway_reference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Gateway_reference { get; set; }

        [Newtonsoft.Json.JsonProperty("merchant_reference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Merchant_reference { get; set; }

        [Newtonsoft.Json.JsonProperty("payment_config_category", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Payment_config_category { get; set; }

        [Newtonsoft.Json.JsonProperty("transaction_reference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Transaction_reference { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TransactionListModel
    {
        [Newtonsoft.Json.JsonProperty("PTCActionResponse", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PTCActionResponse { get; set; }

        [Newtonsoft.Json.JsonProperty("PTCCreatedAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PTCCreatedAt { get; set; }

        [Newtonsoft.Json.JsonProperty("PTCMetadata", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PTCMetadata { get; set; }

        [Newtonsoft.Json.JsonProperty("PTCSkipMultiple", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PTCSkipMultiple { get; set; }

        [Newtonsoft.Json.JsonProperty("PTCStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PTCStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("PTCType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PTCType { get; set; }

        [Newtonsoft.Json.JsonProperty("PTCUpdatedAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PTCUpdatedAt { get; set; }

        [Newtonsoft.Json.JsonProperty("amount_in_cents", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Amount_in_cents { get; set; }

        [Newtonsoft.Json.JsonProperty("billing_account_number", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Billing_account_number { get; set; }

        [Newtonsoft.Json.JsonProperty("card_type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Card_type { get; set; }

        [Newtonsoft.Json.JsonProperty("created_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Created_at { get; set; }

        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Currency { get; set; }

        [Newtonsoft.Json.JsonProperty("error_code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Error_code { get; set; }

        [Newtonsoft.Json.JsonProperty("error_msg", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Error_msg { get; set; }

        [Newtonsoft.Json.JsonProperty("external_transaction_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string External_transaction_id { get; set; }

        [Newtonsoft.Json.JsonProperty("first_six_digits", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string First_six_digits { get; set; }

        [Newtonsoft.Json.JsonProperty("gateway", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Gateway { get; set; }

        [Newtonsoft.Json.JsonProperty("invoice_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Invoice_id { get; set; }

        [Newtonsoft.Json.JsonProperty("last_four_digits", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Last_four_digits { get; set; }

        [Newtonsoft.Json.JsonProperty("payment_reference_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Payment_reference_id { get; set; }

        [Newtonsoft.Json.JsonProperty("payment_type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Payment_type { get; set; }

        [Newtonsoft.Json.JsonProperty("psp_reference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Psp_reference { get; set; }

        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Status { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

        [Newtonsoft.Json.JsonProperty("updated_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Updated_at { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Amount
    {
        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Currency { get; set; }

        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Value { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NotificationItem
    {
        [Newtonsoft.Json.JsonProperty("NotificationRequestItem", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PaymentStatusReq NotificationRequestItem { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PaymentDebitReq
    {
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Amount { get; set; }

        [Newtonsoft.Json.JsonProperty("callback_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Callback_url { get; set; }

        [Newtonsoft.Json.JsonProperty("channel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Channel { get; set; }

        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Currency { get; set; }

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("redirect_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Redirect_url { get; set; }

        [Newtonsoft.Json.JsonProperty("transaction_category", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Transaction_category { get; set; }

        [Newtonsoft.Json.JsonProperty("txn_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Txn_id { get; set; }

        [Newtonsoft.Json.JsonProperty("user_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string User_id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PaymentGatewayStatusReq
    {
        [Newtonsoft.Json.JsonProperty("notificationItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<NotificationItem> NotificationItems { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PaymentInstrumentsCreateReq
    {
        [Newtonsoft.Json.JsonProperty("channel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Channel { get; set; }

        [Newtonsoft.Json.JsonProperty("user_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string User_id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PaymentInstrumentsUpdateReq
    {
        [Newtonsoft.Json.JsonProperty("channel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Channel { get; set; }

        [Newtonsoft.Json.JsonProperty("instrument_obj", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PAASResult Instrument_obj { get; set; }

        [Newtonsoft.Json.JsonProperty("user_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string User_id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PaymentProcessReq
    {
        [Newtonsoft.Json.JsonProperty("channel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Channel { get; set; }

        [Newtonsoft.Json.JsonProperty("payment_method", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Payment_method { get; set; }

        [Newtonsoft.Json.JsonProperty("payment_reference_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Payment_reference_id { get; set; }

        [Newtonsoft.Json.JsonProperty("txn_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Txn_id { get; set; }

        [Newtonsoft.Json.JsonProperty("user_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string User_id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PaymentStatusReq
    {
        [Newtonsoft.Json.JsonProperty("additionalData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object AdditionalData { get; set; }

        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Amount Amount { get; set; }

        [Newtonsoft.Json.JsonProperty("merchantReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MerchantReference { get; set; }

        [Newtonsoft.Json.JsonProperty("pspReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PspReference { get; set; }

        [Newtonsoft.Json.JsonProperty("reason", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Reason { get; set; }

        [Newtonsoft.Json.JsonProperty("success", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Success { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ActionBodyObject
    {
        [Newtonsoft.Json.JsonProperty("AccessID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AccessID { get; set; }

        [Newtonsoft.Json.JsonProperty("AccessPass", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AccessPass { get; set; }

        [Newtonsoft.Json.JsonProperty("Token", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Token { get; set; }

        [Newtonsoft.Json.JsonProperty("amt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Amt { get; set; }

        [Newtonsoft.Json.JsonProperty("cur", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Cur { get; set; }

        [Newtonsoft.Json.JsonProperty("mid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Mid { get; set; }

        [Newtonsoft.Json.JsonProperty("rcard", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Rcard { get; set; }

        [Newtonsoft.Json.JsonProperty("recurrentid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Recurrentid { get; set; }

        [Newtonsoft.Json.JsonProperty("ref", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Ref { get; set; }

        [Newtonsoft.Json.JsonProperty("returnurl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Returnurl { get; set; }

        [Newtonsoft.Json.JsonProperty("skipstatuspage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Skipstatuspage { get; set; }

        [Newtonsoft.Json.JsonProperty("statusurl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Statusurl { get; set; }

        [Newtonsoft.Json.JsonProperty("subsequentmid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Subsequentmid { get; set; }

        [Newtonsoft.Json.JsonProperty("transtype", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Transtype { get; set; }

        [Newtonsoft.Json.JsonProperty("version", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Version { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ActionObject
    {
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Amount { get; set; }

        [Newtonsoft.Json.JsonProperty("body", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ActionBodyObject Body { get; set; }

        [Newtonsoft.Json.JsonProperty("card_seq", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Card_seq { get; set; }

        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Currency { get; set; }

        [Newtonsoft.Json.JsonProperty("drop_in_form_data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DropInFormData Drop_in_form_data { get; set; }

        [Newtonsoft.Json.JsonProperty("error_code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Error_code { get; set; }

        [Newtonsoft.Json.JsonProperty("error_message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Error_message { get; set; }

        [Newtonsoft.Json.JsonProperty("header", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Header { get; set; }

        [Newtonsoft.Json.JsonProperty("member_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Member_id { get; set; }

        [Newtonsoft.Json.JsonProperty("member_registration_status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Member_registration_status { get; set; }

        [Newtonsoft.Json.JsonProperty("origin", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Origin { get; set; }

        [Newtonsoft.Json.JsonProperty("payment_methods", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<PaymentMethods> Payment_methods { get; set; }

        [Newtonsoft.Json.JsonProperty("payment_status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Payment_status { get; set; }

        [Newtonsoft.Json.JsonProperty("publishable_key", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Publishable_key { get; set; }

        [Newtonsoft.Json.JsonProperty("secret_key", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Secret_key { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }

        [Newtonsoft.Json.JsonProperty("x-auth", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string XAuth { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DropInFormData
    {
        [Newtonsoft.Json.JsonProperty("groups", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<object> Groups { get; set; }

        [Newtonsoft.Json.JsonProperty("paymentMethods", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<PaymentMethods> PaymentMethods { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GenericProviderServiceResponse
    {
        [Newtonsoft.Json.JsonProperty("action", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Action { get; set; }

        [Newtonsoft.Json.JsonProperty("action_object", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Action_object { get; set; }

        [Newtonsoft.Json.JsonProperty("error_code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Error_code { get; set; }

        [Newtonsoft.Json.JsonProperty("error_message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Error_message { get; set; }

        [Newtonsoft.Json.JsonProperty("gateway", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Gateway { get; set; }

        [Newtonsoft.Json.JsonProperty("gmo_access_token", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> Gmo_access_token { get; set; }

        [Newtonsoft.Json.JsonProperty("payment_reference_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Payment_reference_id { get; set; }

        [Newtonsoft.Json.JsonProperty("psp_reference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Psp_reference { get; set; }

        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Status { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GenericUpfront3dFormResponse
    {
        /// <summary>
        /// init_payment_form redirect
        /// </summary>
        [Newtonsoft.Json.JsonProperty("action", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Action { get; set; }

        [Newtonsoft.Json.JsonProperty("action_object", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ActionObject Action_object { get; set; }

        [Newtonsoft.Json.JsonProperty("card_number", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Card_number { get; set; }

        [Newtonsoft.Json.JsonProperty("card_type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Card_type { get; set; }

        [Newtonsoft.Json.JsonProperty("customer_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Customer_id { get; set; }

        [Newtonsoft.Json.JsonProperty("environment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Environment { get; set; }

        [Newtonsoft.Json.JsonProperty("gateway", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Gateway { get; set; }

        [Newtonsoft.Json.JsonProperty("gopay", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Gopay { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("payment_reference_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Payment_reference_id { get; set; }

        [Newtonsoft.Json.JsonProperty("psp_reference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Psp_reference { get; set; }

        [Newtonsoft.Json.JsonProperty("ref_num", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Ref_num { get; set; }

        [Newtonsoft.Json.JsonProperty("skip_save_card_details", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Skip_save_card_details { get; set; }

        [Newtonsoft.Json.JsonProperty("stripe", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Stripe { get; set; }

        [Newtonsoft.Json.JsonProperty("txn_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Txn_id { get; set; }

        /// <summary>
        /// For backward compatibility
        /// </summary>
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PaymentMethods
    {
        [Newtonsoft.Json.JsonProperty("brands", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> Brands { get; set; }

        /// <summary>
        /// []map[string]string
        /// </summary>
        [Newtonsoft.Json.JsonProperty("details", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<object> Details { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AddSpecRequest
    {
        [Newtonsoft.Json.JsonProperty("config_key", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Config_key { get; set; }

        [Newtonsoft.Json.JsonProperty("config_value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Config_value { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AsyncPaymentRequest
    {
        /// <summary>
        /// `json:"account_number" validate:"nonzero"` // nonzero because this message is only expected to come from BAAS.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("account_number", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Account_number { get; set; }

        [Newtonsoft.Json.JsonProperty("additional_data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PaymentRequestAdditionalData Additional_data { get; set; }

        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Amount { get; set; }

        [Newtonsoft.Json.JsonProperty("billing_account_number", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Billing_account_number { get; set; }

        [Newtonsoft.Json.JsonProperty("browserInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object BrowserInfo { get; set; }

        [Newtonsoft.Json.JsonProperty("channel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Channel { get; set; }

        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Currency { get; set; }

        [Newtonsoft.Json.JsonProperty("customer_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Customer_id { get; set; }

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("external_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string External_id { get; set; }

        [Newtonsoft.Json.JsonProperty("instrument_data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PaymentRequestInstrumentData Instrument_data { get; set; }

        [Newtonsoft.Json.JsonProperty("invoiceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InvoiceId { get; set; }

        [Newtonsoft.Json.JsonProperty("metadata", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Metadata { get; set; }

        [Newtonsoft.Json.JsonProperty("notification_channel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PaymentRequestNotificationChannel Notification_channel { get; set; }

        /// <summary>
        /// Required for adyen
        /// </summary>
        [Newtonsoft.Json.JsonProperty("origin", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Origin { get; set; }

        [Newtonsoft.Json.JsonProperty("package_name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Package_name { get; set; }

        [Newtonsoft.Json.JsonProperty("paymentMethod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object PaymentMethod { get; set; }

        [Newtonsoft.Json.JsonProperty("payment_config_category", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Payment_config_category { get; set; }

        [Newtonsoft.Json.JsonProperty("payment_type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Payment_type { get; set; }

        [Newtonsoft.Json.JsonProperty("riskData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object RiskData { get; set; }

        [Newtonsoft.Json.JsonProperty("service_instance_number", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Service_instance_number { get; set; }

        [Newtonsoft.Json.JsonProperty("token", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Token { get; set; }

        [Newtonsoft.Json.JsonProperty("transaction_category", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Transaction_category { get; set; }

        [Newtonsoft.Json.JsonProperty("txn_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Txn_id { get; set; }

        /// <summary>
        /// `json:"uuid" validate:"nonzero"` // mapped to the external_transaction_id in our database
        /// </summary>
        [Newtonsoft.Json.JsonProperty("uuid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Uuid { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ConnectorCallbackEvent
    {
        [Newtonsoft.Json.JsonProperty("coreTransactionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CoreTransactionId { get; set; }

        /// <summary>
        /// can be PaymentGatewayUpfrontResponse,PaymentGatewayRefundResponse,PaymentGatewayPaymentMethodResponse
        /// </summary>
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<int> Data { get; set; }

        /// <summary>
        /// can be PaymentGatewayUpfrontResponse,PaymentGatewayRefundResponse,PaymentGatewayPaymentMethodResponse
        /// </summary>
        [Newtonsoft.Json.JsonProperty("error", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<int> Error { get; set; }

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InternalRefundTransactionRequest
    {
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Amount { get; set; }

        [Newtonsoft.Json.JsonProperty("core_transaction_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Core_transaction_id { get; set; }

        [Newtonsoft.Json.JsonProperty("payment_reference_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Payment_reference_id { get; set; }

        [Newtonsoft.Json.JsonProperty("refund_reason", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Refund_reason { get; set; }

        [Newtonsoft.Json.JsonProperty("refund_type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Refund_type { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ManualPaymentRequest
    {
        [Newtonsoft.Json.JsonProperty("account_number", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Account_number { get; set; }

        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Amount { get; set; }

        [Newtonsoft.Json.JsonProperty("billing_account_number", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Billing_account_number { get; set; }

        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Currency { get; set; }

        [Newtonsoft.Json.JsonProperty("customer_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Customer_id { get; set; }

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("invoice_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Invoice_id { get; set; }

        [Newtonsoft.Json.JsonProperty("order_reference_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Order_reference_id { get; set; }

        [Newtonsoft.Json.JsonProperty("payment_method", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Payment_method { get; set; }

        [Newtonsoft.Json.JsonProperty("service_instance_number", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Service_instance_number { get; set; }

        [Newtonsoft.Json.JsonProperty("transaction_type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Transaction_type { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NotificationChannel
    {
        [Newtonsoft.Json.JsonProperty("exchange_name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Exchange_name { get; set; }

        [Newtonsoft.Json.JsonProperty("method", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Method { get; set; }

        [Newtonsoft.Json.JsonProperty("routing_key", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Routing_key { get; set; }

        [Newtonsoft.Json.JsonProperty("skip_multiple", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Skip_multiple { get; set; }

        [Newtonsoft.Json.JsonProperty("tenant", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Tenant { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PaymentRequestNotificationChannel
    {
        [Newtonsoft.Json.JsonProperty("exchange_name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Exchange_name { get; set; }

        [Newtonsoft.Json.JsonProperty("method", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Method { get; set; }

        [Newtonsoft.Json.JsonProperty("routing_key", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Routing_key { get; set; }

        [Newtonsoft.Json.JsonProperty("skip_multiple", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Skip_multiple { get; set; }

        [Newtonsoft.Json.JsonProperty("tenant", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Tenant { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProcessRefundTransactionRequest
    {
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Amount { get; set; }

        [Newtonsoft.Json.JsonProperty("refund_reason", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Refund_reason { get; set; }

        [Newtonsoft.Json.JsonProperty("refund_type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Refund_type { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RecurrentPaymentRequest
    {
        [Newtonsoft.Json.JsonProperty("account_number", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Account_number { get; set; }

        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Amount { get; set; }

        [Newtonsoft.Json.JsonProperty("billing_account_number", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Billing_account_number { get; set; }

        /// <summary>
        /// https://libertywireless.atlassian.net/browse/B2BCL-11331
        /// <br/>https://libertywireless.atlassian.net/wiki/spaces/I2/pages/2680913963/Solution+Refund+order+cancellation#Interservice-Communication
        /// </summary>
        [Newtonsoft.Json.JsonProperty("charge_amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Charge_amount { get; set; }

        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Currency { get; set; }

        /// <summary>
        /// UserService's customer_id
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customer_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Customer_id { get; set; }

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("discount_amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Discount_amount { get; set; }

        [Newtonsoft.Json.JsonProperty("external_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string External_id { get; set; }

        [Newtonsoft.Json.JsonProperty("invoiceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InvoiceId { get; set; }

        [Newtonsoft.Json.JsonProperty("metadata", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Metadata { get; set; }

        [Newtonsoft.Json.JsonProperty("notification_channel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public NotificationChannel Notification_channel { get; set; }

        /// <summary>
        /// UserService's customer_id
        /// </summary>
        [Newtonsoft.Json.JsonProperty("order_ref", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Order_ref { get; set; }

        [Newtonsoft.Json.JsonProperty("original_amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Original_amount { get; set; }

        [Newtonsoft.Json.JsonProperty("payment_type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Payment_type { get; set; }

        [Newtonsoft.Json.JsonProperty("service_instance_number", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Service_instance_number { get; set; }

        [Newtonsoft.Json.JsonProperty("transaction_type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Transaction_type { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SaveAndUpdateCardRequest
    {
        /// <summary>
        /// `json:"account_number" validate:"nonzero"` // nonzero because this message is only expected to come from BAAS.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("account_number", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Account_number { get; set; }

        [Newtonsoft.Json.JsonProperty("additional_data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PaymentRequestAdditionalData2 Additional_data { get; set; }

        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Amount { get; set; }

        [Newtonsoft.Json.JsonProperty("billing_account_number", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Billing_account_number { get; set; }

        [Newtonsoft.Json.JsonProperty("browserInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object BrowserInfo { get; set; }

        [Newtonsoft.Json.JsonProperty("channel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Channel { get; set; }

        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Currency { get; set; }

        [Newtonsoft.Json.JsonProperty("customer_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Customer_id { get; set; }

        [Newtonsoft.Json.JsonProperty("customer_type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Customer_type { get; set; }

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("external_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string External_id { get; set; }

        [Newtonsoft.Json.JsonProperty("instrument_data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PaymentRequestInstrumentData2 Instrument_data { get; set; }

        [Newtonsoft.Json.JsonProperty("invoiceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InvoiceId { get; set; }

        [Newtonsoft.Json.JsonProperty("metadata", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Metadata { get; set; }

        [Newtonsoft.Json.JsonProperty("notification_channel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public NotificationChannel Notification_channel { get; set; }

        /// <summary>
        /// Required for adyen
        /// </summary>
        [Newtonsoft.Json.JsonProperty("origin", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Origin { get; set; }

        [Newtonsoft.Json.JsonProperty("package_name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Package_name { get; set; }

        [Newtonsoft.Json.JsonProperty("paymentMethod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object PaymentMethod { get; set; }

        [Newtonsoft.Json.JsonProperty("payment_config_category", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Payment_config_category { get; set; }

        [Newtonsoft.Json.JsonProperty("payment_type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Payment_type { get; set; }

        [Newtonsoft.Json.JsonProperty("riskData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object RiskData { get; set; }

        [Newtonsoft.Json.JsonProperty("service_instance_number", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Service_instance_number { get; set; }

        [Newtonsoft.Json.JsonProperty("token", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Token { get; set; }

        [Newtonsoft.Json.JsonProperty("transaction_category", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Transaction_category { get; set; }

        [Newtonsoft.Json.JsonProperty("transaction_type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Transaction_type { get; set; }

        /// <summary>
        /// mapped to the profile order_reference in our database
        /// </summary>
        [Newtonsoft.Json.JsonProperty("txn_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Txn_id { get; set; }

        /// <summary>
        /// `json:"uuid" validate:"nonzero"`
        /// </summary>
        [Newtonsoft.Json.JsonProperty("uuid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Uuid { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpdatePaylinkSpecificationRequest
    {
        [Newtonsoft.Json.JsonProperty("base_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Base_url { get; set; }

        [Newtonsoft.Json.JsonProperty("number_of_days", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Number_of_days { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpdateSpecRequest
    {
        [Newtonsoft.Json.JsonProperty("config_key", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Config_key { get; set; }

        [Newtonsoft.Json.JsonProperty("config_value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Config_value { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpfrontPaymentRequest
    {
        /// <summary>
        /// `json:"account_number" validate:"nonzero"` // nonzero because this message is only expected to come from BAAS.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("account_number", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Account_number { get; set; }

        [Newtonsoft.Json.JsonProperty("additional_data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PaymentRequestAdditionalData2 Additional_data { get; set; }

        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Amount { get; set; }

        [Newtonsoft.Json.JsonProperty("billing_account_number", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Billing_account_number { get; set; }

        [Newtonsoft.Json.JsonProperty("browserInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object BrowserInfo { get; set; }

        [Newtonsoft.Json.JsonProperty("channel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Channel { get; set; }

        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Currency { get; set; }

        [Newtonsoft.Json.JsonProperty("customer_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Customer_id { get; set; }

        [Newtonsoft.Json.JsonProperty("customer_type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Customer_type { get; set; }

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("external_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string External_id { get; set; }

        [Newtonsoft.Json.JsonProperty("instrument_data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PaymentRequestInstrumentData2 Instrument_data { get; set; }

        [Newtonsoft.Json.JsonProperty("invoiceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InvoiceId { get; set; }

        [Newtonsoft.Json.JsonProperty("metadata", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Metadata { get; set; }

        [Newtonsoft.Json.JsonProperty("notification_channel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public NotificationChannel Notification_channel { get; set; }

        /// <summary>
        /// Required for adyen
        /// </summary>
        [Newtonsoft.Json.JsonProperty("origin", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Origin { get; set; }

        [Newtonsoft.Json.JsonProperty("package_name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Package_name { get; set; }

        [Newtonsoft.Json.JsonProperty("paymentMethod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object PaymentMethod { get; set; }

        [Newtonsoft.Json.JsonProperty("payment_config_category", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Payment_config_category { get; set; }

        [Newtonsoft.Json.JsonProperty("payment_type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Payment_type { get; set; }

        [Newtonsoft.Json.JsonProperty("riskData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object RiskData { get; set; }

        [Newtonsoft.Json.JsonProperty("service_instance_number", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Service_instance_number { get; set; }

        [Newtonsoft.Json.JsonProperty("token", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Token { get; set; }

        [Newtonsoft.Json.JsonProperty("transaction_category", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Transaction_category { get; set; }

        [Newtonsoft.Json.JsonProperty("transaction_type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Transaction_type { get; set; }

        /// <summary>
        /// mapped to the profile order_reference in our database
        /// </summary>
        [Newtonsoft.Json.JsonProperty("txn_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Txn_id { get; set; }

        /// <summary>
        /// `json:"uuid" validate:"nonzero"`
        /// </summary>
        [Newtonsoft.Json.JsonProperty("uuid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Uuid { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ActionBodyObject2
    {
        [Newtonsoft.Json.JsonProperty("AccessID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AccessID { get; set; }

        [Newtonsoft.Json.JsonProperty("AccessPass", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AccessPass { get; set; }

        [Newtonsoft.Json.JsonProperty("Token", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Token { get; set; }

        [Newtonsoft.Json.JsonProperty("amt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Amt { get; set; }

        [Newtonsoft.Json.JsonProperty("cur", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Cur { get; set; }

        [Newtonsoft.Json.JsonProperty("mid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Mid { get; set; }

        [Newtonsoft.Json.JsonProperty("rcard", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Rcard { get; set; }

        [Newtonsoft.Json.JsonProperty("recurrentid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Recurrentid { get; set; }

        [Newtonsoft.Json.JsonProperty("ref", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Ref { get; set; }

        [Newtonsoft.Json.JsonProperty("returnurl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Returnurl { get; set; }

        [Newtonsoft.Json.JsonProperty("skipstatuspage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Skipstatuspage { get; set; }

        [Newtonsoft.Json.JsonProperty("statusurl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Statusurl { get; set; }

        [Newtonsoft.Json.JsonProperty("subsequentmid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Subsequentmid { get; set; }

        [Newtonsoft.Json.JsonProperty("transtype", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Transtype { get; set; }

        [Newtonsoft.Json.JsonProperty("version", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Version { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ActionObject2
    {
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Amount { get; set; }

        [Newtonsoft.Json.JsonProperty("body", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ActionBodyObject2 Body { get; set; }

        [Newtonsoft.Json.JsonProperty("card_seq", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Card_seq { get; set; }

        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Currency { get; set; }

        [Newtonsoft.Json.JsonProperty("drop_in_form_data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DropInFormData2 Drop_in_form_data { get; set; }

        [Newtonsoft.Json.JsonProperty("error_code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Error_code { get; set; }

        [Newtonsoft.Json.JsonProperty("error_message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Error_message { get; set; }

        [Newtonsoft.Json.JsonProperty("header", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Header { get; set; }

        [Newtonsoft.Json.JsonProperty("member_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Member_id { get; set; }

        [Newtonsoft.Json.JsonProperty("member_registration_status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Member_registration_status { get; set; }

        [Newtonsoft.Json.JsonProperty("origin", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Origin { get; set; }

        [Newtonsoft.Json.JsonProperty("payment_methods", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<PaymentMethods2> Payment_methods { get; set; }

        [Newtonsoft.Json.JsonProperty("payment_status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Payment_status { get; set; }

        [Newtonsoft.Json.JsonProperty("publishable_key", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Publishable_key { get; set; }

        [Newtonsoft.Json.JsonProperty("secret_key", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Secret_key { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }

        [Newtonsoft.Json.JsonProperty("x-auth", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string XAuth { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AddSpecResp
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AdminPaymentInstrumentModel
    {
        [Newtonsoft.Json.JsonProperty("card_type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Card_type { get; set; }

        [Newtonsoft.Json.JsonProperty("created_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Created_at { get; set; }

        [Newtonsoft.Json.JsonProperty("customer_account_number", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Customer_account_number { get; set; }

        [Newtonsoft.Json.JsonProperty("customer_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Customer_id { get; set; }

        [Newtonsoft.Json.JsonProperty("first_six_digits", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string First_six_digits { get; set; }

        [Newtonsoft.Json.JsonProperty("gateway", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Gateway { get; set; }

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("is_default", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Is_default { get; set; }

        [Newtonsoft.Json.JsonProperty("last_four_digits", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Last_four_digits { get; set; }

        [Newtonsoft.Json.JsonProperty("metadata", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<int> Metadata { get; set; }

        [Newtonsoft.Json.JsonProperty("order_ref", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Order_ref { get; set; }

        [Newtonsoft.Json.JsonProperty("updated_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Updated_at { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreditCardExpiryStatusResponse
    {
        [Newtonsoft.Json.JsonProperty("result", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Result2 Result { get; set; }

        [Newtonsoft.Json.JsonProperty("success", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Success { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomerTransactionDetailsListModel
    {
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Amount { get; set; }

        [Newtonsoft.Json.JsonProperty("customer_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Customer_id { get; set; }

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("int_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Int_id { get; set; }

        [Newtonsoft.Json.JsonProperty("is_refundable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Is_refundable { get; set; }

        [Newtonsoft.Json.JsonProperty("payment_reference_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Payment_reference_id { get; set; }

        [Newtonsoft.Json.JsonProperty("service_account_number", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Service_account_number { get; set; }

        [Newtonsoft.Json.JsonProperty("transaction_date", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Transaction_date { get; set; }

        [Newtonsoft.Json.JsonProperty("transaction_status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Transaction_status { get; set; }

        [Newtonsoft.Json.JsonProperty("transaction_type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Transaction_type { get; set; }

        [Newtonsoft.Json.JsonProperty("uuid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Uuid { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Data
    {
        [Newtonsoft.Json.JsonProperty("customerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerId { get; set; }

        /// <summary>
        /// stripe payment or setup intent
        /// </summary>
        [Newtonsoft.Json.JsonProperty("intent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Intent { get; set; }

        [Newtonsoft.Json.JsonProperty("intentConfirmation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IntentConfirmation { get; set; }

        [Newtonsoft.Json.JsonProperty("object", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Object { get; set; }

        [Newtonsoft.Json.JsonProperty("publishableKey", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PublishableKey { get; set; }

        [Newtonsoft.Json.JsonProperty("secretKey", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SecretKey { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DeleteSpecResp
    {
        [Newtonsoft.Json.JsonProperty("config_key", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Config_key { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DropInFormData2
    {
        [Newtonsoft.Json.JsonProperty("groups", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<object> Groups { get; set; }

        [Newtonsoft.Json.JsonProperty("paymentMethods", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<PaymentMethods2> PaymentMethods { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FormData
    {
        [Newtonsoft.Json.JsonProperty("action", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Action { get; set; }

        [Newtonsoft.Json.JsonProperty("action_object", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ActionObject2 Action_object { get; set; }

        [Newtonsoft.Json.JsonProperty("core_transaction_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Core_transaction_id { get; set; }

        [Newtonsoft.Json.JsonProperty("gateway", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Gateway { get; set; }

        [Newtonsoft.Json.JsonProperty("payment_reference_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Payment_reference_id { get; set; }

        [Newtonsoft.Json.JsonProperty("psp_object", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Psp_object { get; set; }

        [Newtonsoft.Json.JsonProperty("psp_reference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Psp_reference { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GeneratePaylinkResponse
    {
        [Newtonsoft.Json.JsonProperty("paylink", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Paylink { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GenerateTransactionReportResponse
    {
        [Newtonsoft.Json.JsonProperty("file_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string File_id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetPaylinkInfoResponse
    {
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Amount { get; set; }

        [Newtonsoft.Json.JsonProperty("currencyCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CurrencyCode { get; set; }

        [Newtonsoft.Json.JsonProperty("currencySymbol", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CurrencySymbol { get; set; }

        [Newtonsoft.Json.JsonProperty("customerName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerName { get; set; }

        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email { get; set; }

        [Newtonsoft.Json.JsonProperty("formData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FormData FormData { get; set; }

        [Newtonsoft.Json.JsonProperty("invoiceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InvoiceId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetPaylinkSpecificationResponse
    {
        [Newtonsoft.Json.JsonProperty("numberOfDays", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NumberOfDays { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetSpecResp
    {
        [Newtonsoft.Json.JsonProperty("config_key", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Config_key { get; set; }

        [Newtonsoft.Json.JsonProperty("config_value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Config_value { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InstrumentListResponse
    {
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Code { get; set; }

        [Newtonsoft.Json.JsonProperty("iTotalDisplayRecords", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ITotalDisplayRecords { get; set; }

        [Newtonsoft.Json.JsonProperty("iTotalRecords", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ITotalRecords { get; set; }

        [Newtonsoft.Json.JsonProperty("result", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<AdminPaymentInstrumentModel> Result { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InternalRefundTransactionResponse
    {
        [Newtonsoft.Json.JsonProperty("result", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Result3 Result { get; set; }

        [Newtonsoft.Json.JsonProperty("success", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Success { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ManualPayementReponse
    {
        [Newtonsoft.Json.JsonProperty("result", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Result4 Result { get; set; }

        [Newtonsoft.Json.JsonProperty("success", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Success { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PaymentGatewayDebugDetails
    {
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("responseTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ResponseTime { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PaymentGatewayErrorDetails
    {
        [Newtonsoft.Json.JsonProperty("debug", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PaymentGatewayDebugDetails Debug { get; set; }

        [Newtonsoft.Json.JsonProperty("errorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorCode { get; set; }

        [Newtonsoft.Json.JsonProperty("errorId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ErrorId { get; set; }

        [Newtonsoft.Json.JsonProperty("object", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Object { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PaymentGatewayPaymentMethodResponse
    {
        [Newtonsoft.Json.JsonProperty("externalTransactionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExternalTransactionId { get; set; }

        [Newtonsoft.Json.JsonProperty("paymentReferenceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PaymentReferenceId { get; set; }

        [Newtonsoft.Json.JsonProperty("pspInstrumentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PspInstrumentId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PaymentGatewayRefundResponse
    {
        [Newtonsoft.Json.JsonProperty("connectorTransactionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ConnectorTransactionId { get; set; }

        [Newtonsoft.Json.JsonProperty("coreReferenceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CoreReferenceId { get; set; }

        [Newtonsoft.Json.JsonProperty("coreTransactionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CoreTransactionId { get; set; }

        [Newtonsoft.Json.JsonProperty("refundedAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? RefundedAmount { get; set; }

        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Status { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PaymentGatewayUpfrontResponse
    {
        [Newtonsoft.Json.JsonProperty("connectorInstrumentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ConnectorInstrumentId { get; set; }

        [Newtonsoft.Json.JsonProperty("connectorTransactionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ConnectorTransactionId { get; set; }

        [Newtonsoft.Json.JsonProperty("coreInstrumentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CoreInstrumentId { get; set; }

        [Newtonsoft.Json.JsonProperty("coreProfileId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CoreProfileId { get; set; }

        [Newtonsoft.Json.JsonProperty("coreTransactionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CoreTransactionId { get; set; }

        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Data Data { get; set; }

        [Newtonsoft.Json.JsonProperty("errorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorCode { get; set; }

        [Newtonsoft.Json.JsonProperty("errorMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorMessage { get; set; }

        [Newtonsoft.Json.JsonProperty("paymentIntentStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PaymentIntentStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Status { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PaymentInstrumentDetailsResponse
    {
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Code { get; set; }

        [Newtonsoft.Json.JsonProperty("result", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AdminPaymentInstrumentModel Result { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PaymentMethods2
    {
        [Newtonsoft.Json.JsonProperty("brands", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> Brands { get; set; }

        [Newtonsoft.Json.JsonProperty("details", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<object> Details { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PaymentRequestResponse
    {
        [Newtonsoft.Json.JsonProperty("result", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GenericUpfront3dFormResponse Result { get; set; }

        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Status { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RecurrentPaymentResponse
    {
        [Newtonsoft.Json.JsonProperty("approval_code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Approval_code { get; set; }

        [Newtonsoft.Json.JsonProperty("card_num", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Card_num { get; set; }

        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Code { get; set; }

        [Newtonsoft.Json.JsonProperty("core_transaction_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Core_transaction_id { get; set; }

        [Newtonsoft.Json.JsonProperty("created_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Created_at { get; set; }

        [Newtonsoft.Json.JsonProperty("error_code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Error_code { get; set; }

        [Newtonsoft.Json.JsonProperty("gmoAccessData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, string> GmoAccessData { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("metadata", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<int> Metadata { get; set; }

        /// <summary>
        /// payment_reference_id
        /// </summary>
        [Newtonsoft.Json.JsonProperty("order_ref", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Order_ref { get; set; }

        [Newtonsoft.Json.JsonProperty("payment_status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Payment_status { get; set; }

        [Newtonsoft.Json.JsonProperty("payment_transaction_error_code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Payment_transaction_error_code { get; set; }

        [Newtonsoft.Json.JsonProperty("payment_transaction_error_msg", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Payment_transaction_error_msg { get; set; }

        [Newtonsoft.Json.JsonProperty("update_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Update_at { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RefundListModel
    {
        /// <summary>
        /// refund refunded_amount
        /// </summary>
        [Newtonsoft.Json.JsonProperty("amount_in_cents", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Amount_in_cents { get; set; }

        [Newtonsoft.Json.JsonProperty("billing_account_number", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Billing_account_number { get; set; }

        [Newtonsoft.Json.JsonProperty("card_type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Card_type { get; set; }

        [Newtonsoft.Json.JsonProperty("created_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Created_at { get; set; }

        [Newtonsoft.Json.JsonProperty("error_code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Error_code { get; set; }

        [Newtonsoft.Json.JsonProperty("error_msg", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Error_msg { get; set; }

        /// <summary>
        /// refund order reference
        /// </summary>
        [Newtonsoft.Json.JsonProperty("external_transaction_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string External_transaction_id { get; set; }

        [Newtonsoft.Json.JsonProperty("invoice_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Invoice_id { get; set; }

        [Newtonsoft.Json.JsonProperty("last_four_digits", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Last_four_digits { get; set; }

        [Newtonsoft.Json.JsonProperty("payment_reference_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Payment_reference_id { get; set; }

        [Newtonsoft.Json.JsonProperty("payment_type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Payment_type { get; set; }

        [Newtonsoft.Json.JsonProperty("reason", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Reason { get; set; }

        /// <summary>
        /// refund status (SUCCESS, FAILURE, CREATED)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("refund_status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Refund_status { get; set; }

        /// <summary>
        /// refund requested_amount
        /// </summary>
        [Newtonsoft.Json.JsonProperty("requested_amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Requested_amount { get; set; }

        /// <summary>
        /// transaction amount
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transaction_amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Transaction_amount { get; set; }

        /// <summary>
        /// transaction refund_status (FULL, PARTIAL, PAYMENT)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transaction_status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Transaction_status { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

        [Newtonsoft.Json.JsonProperty("updated_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Updated_at { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RefundListResponse
    {
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Code { get; set; }

        [Newtonsoft.Json.JsonProperty("refund_records", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<RefundListModel> Refund_records { get; set; }

        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Status { get; set; }

        [Newtonsoft.Json.JsonProperty("total_count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Total_count { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RefundTransactionResponse
    {
        [Newtonsoft.Json.JsonProperty("result", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Result5 Result { get; set; }

        [Newtonsoft.Json.JsonProperty("success", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Success { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RefundableDeatilsResponse
    {
        [Newtonsoft.Json.JsonProperty("refund_reasons", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> Refund_reasons { get; set; }

        [Newtonsoft.Json.JsonProperty("refund_types", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> Refund_types { get; set; }

        [Newtonsoft.Json.JsonProperty("refundable_amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Refundable_amount { get; set; }

        [Newtonsoft.Json.JsonProperty("transaction_amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Transaction_amount { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Result
    {
        /// <summary>
        /// init_payment_form redirect
        /// </summary>
        [Newtonsoft.Json.JsonProperty("action", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Action { get; set; }

        [Newtonsoft.Json.JsonProperty("action_object", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ActionObject2 Action_object { get; set; }

        [Newtonsoft.Json.JsonProperty("card_number", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Card_number { get; set; }

        [Newtonsoft.Json.JsonProperty("card_type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Card_type { get; set; }

        [Newtonsoft.Json.JsonProperty("core_transaction_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Core_transaction_id { get; set; }

        [Newtonsoft.Json.JsonProperty("customer_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Customer_id { get; set; }

        [Newtonsoft.Json.JsonProperty("environment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Environment { get; set; }

        [Newtonsoft.Json.JsonProperty("gateway", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Gateway { get; set; }

        [Newtonsoft.Json.JsonProperty("gopay", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Gopay { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("payment_reference_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Payment_reference_id { get; set; }

        [Newtonsoft.Json.JsonProperty("psp_object", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Psp_object { get; set; }

        [Newtonsoft.Json.JsonProperty("psp_reference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Psp_reference { get; set; }

        [Newtonsoft.Json.JsonProperty("ref_num", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Ref_num { get; set; }

        [Newtonsoft.Json.JsonProperty("skip_save_card_details", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Skip_save_card_details { get; set; }

        [Newtonsoft.Json.JsonProperty("txn_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Txn_id { get; set; }

        /// <summary>
        /// For backward compatibility
        /// </summary>
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TransactionDetailsListModel
    {
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Amount { get; set; }

        [Newtonsoft.Json.JsonProperty("customer_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Customer_id { get; set; }

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("int_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Int_id { get; set; }

        [Newtonsoft.Json.JsonProperty("is_refundable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Is_refundable { get; set; }

        [Newtonsoft.Json.JsonProperty("payment_reference_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Payment_reference_id { get; set; }

        [Newtonsoft.Json.JsonProperty("service_account_number", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Service_account_number { get; set; }

        [Newtonsoft.Json.JsonProperty("transaction_date", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Transaction_date { get; set; }

        [Newtonsoft.Json.JsonProperty("transaction_status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Transaction_status { get; set; }

        [Newtonsoft.Json.JsonProperty("transaction_type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Transaction_type { get; set; }

        [Newtonsoft.Json.JsonProperty("uuid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Uuid { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TransactionListModel2
    {
        [Newtonsoft.Json.JsonProperty("PTCActionResponse", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PTCActionResponse { get; set; }

        [Newtonsoft.Json.JsonProperty("PTCCreatedAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PTCCreatedAt { get; set; }

        [Newtonsoft.Json.JsonProperty("PTCMetadata", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PTCMetadata { get; set; }

        [Newtonsoft.Json.JsonProperty("PTCStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PTCStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("PTCType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PTCType { get; set; }

        [Newtonsoft.Json.JsonProperty("PTCUpdatedAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PTCUpdatedAt { get; set; }

        [Newtonsoft.Json.JsonProperty("amount_in_cents", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Amount_in_cents { get; set; }

        [Newtonsoft.Json.JsonProperty("billing_account_number", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Billing_account_number { get; set; }

        [Newtonsoft.Json.JsonProperty("card_type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Card_type { get; set; }

        [Newtonsoft.Json.JsonProperty("created_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Created_at { get; set; }

        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Currency { get; set; }

        [Newtonsoft.Json.JsonProperty("error_code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Error_code { get; set; }

        [Newtonsoft.Json.JsonProperty("error_msg", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Error_msg { get; set; }

        [Newtonsoft.Json.JsonProperty("first_six_digits", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string First_six_digits { get; set; }

        [Newtonsoft.Json.JsonProperty("gateway", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Gateway { get; set; }

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("last_four_digits", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Last_four_digits { get; set; }

        [Newtonsoft.Json.JsonProperty("payment_reference_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Payment_reference_id { get; set; }

        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Status { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

        [Newtonsoft.Json.JsonProperty("updated_at", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Updated_at { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpdatePaylinkSpecificationResponse
    {
        [Newtonsoft.Json.JsonProperty("success", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Success { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpdateSpecResp
    {
        [Newtonsoft.Json.JsonProperty("config_key", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Config_key { get; set; }

        [Newtonsoft.Json.JsonProperty("config_value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Config_value { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpfrontPaymentResponse
    {
        [Newtonsoft.Json.JsonProperty("result", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Result Result { get; set; }

        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Status { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DebugDetails
    {
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("responseTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ResponseTime { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ErrorResponse
    {
        [Newtonsoft.Json.JsonProperty("failure", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FailureDetails Failure { get; set; }

        [Newtonsoft.Json.JsonProperty("success", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Success { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FailureDetails
    {
        [Newtonsoft.Json.JsonProperty("debug", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DebugDetails Debug { get; set; }

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("errorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorCode { get; set; }

        [Newtonsoft.Json.JsonProperty("errorId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ErrorId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response
    {
        [Newtonsoft.Json.JsonProperty("result", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Result { get; set; }

        [Newtonsoft.Json.JsonProperty("success", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Success { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SuccessResponse
    {
        [Newtonsoft.Json.JsonProperty("result", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Result { get; set; }

        [Newtonsoft.Json.JsonProperty("success", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Success { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SwaggerDocErrorResponse
    {
        [Newtonsoft.Json.JsonProperty("result", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public V2ErrorResponse Result { get; set; }

        [Newtonsoft.Json.JsonProperty("success", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Success { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class V2ErrorResponse
    {
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Code { get; set; }

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Req : UpdateSpecRequest
    {
        [Newtonsoft.Json.JsonProperty("config_value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Config_value { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Req2 : AddSpecRequest
    {
        [Newtonsoft.Json.JsonProperty("config_value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Config_value { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Payload : ConnectorCallbackEvent
    {
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PaymentGatewayUpfrontResponse Data { get; set; }

        [Newtonsoft.Json.JsonProperty("error", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PaymentGatewayErrorDetails Error { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Payload2 : ConnectorCallbackEvent
    {
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PaymentGatewayPaymentMethodResponse Data { get; set; }

        [Newtonsoft.Json.JsonProperty("error", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PaymentGatewayErrorDetails Error { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Payload3 : ConnectorCallbackEvent
    {
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PaymentGatewayRefundResponse Data { get; set; }

        [Newtonsoft.Json.JsonProperty("error", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PaymentGatewayErrorDetails Error { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response2 : SuccessResponse
    {
        [Newtonsoft.Json.JsonProperty("result", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PaymentInstrumentDetailsResponse Result { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response3 : SuccessResponse
    {
        [Newtonsoft.Json.JsonProperty("result", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public InstrumentListResponse Result { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response4 : SuccessResponse
    {
        [Newtonsoft.Json.JsonProperty("result", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TransactionListResponse2 Result { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response5 : SuccessResponse
    {
        [Newtonsoft.Json.JsonProperty("result", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TransactionListResponse2 Result { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response6 : SuccessResponse
    {
        [Newtonsoft.Json.JsonProperty("result", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TransactionDetailsListModel Result { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response7 : SuccessResponse
    {
        [Newtonsoft.Json.JsonProperty("result", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GenerateTransactionReportResponse Result { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response8 : SuccessResponse
    {
        [Newtonsoft.Json.JsonProperty("result", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GenerateTransactionReportResponse Result { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response9 : SuccessResponse
    {
        [Newtonsoft.Json.JsonProperty("result", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RecurrentPaymentResponse Result { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response10 : SuccessResponse
    {
        [Newtonsoft.Json.JsonProperty("result", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CustomerTransactionDetailsListModel Result { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Result2
    {
        [Newtonsoft.Json.JsonProperty("is_card_expiring", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Is_card_expiring { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Result3
    {
        [Newtonsoft.Json.JsonProperty("refund_transaction_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Refund_transaction_id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Result4
    {
        [Newtonsoft.Json.JsonProperty("transaction_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Transaction_id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Result5
    {
        [Newtonsoft.Json.JsonProperty("refund_transaction_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Refund_transaction_id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FileResponse : System.IDisposable
    {
        private System.IDisposable _client;
        private System.IDisposable _response;

        public int StatusCode { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.List<string>> Headers { get; private set; }

        public System.IO.Stream Stream { get; private set; }

        public bool IsPartial
        {
            get { return StatusCode == 206; }
        }

        public FileResponse(int statusCode, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.List<string>> headers, System.IO.Stream stream, System.IDisposable client, System.IDisposable response)
        {
            StatusCode = statusCode;
            Headers = headers;
            Stream = stream;
            _client = client;
            _response = response;
        }

        public void Dispose()
        {
            Stream.Dispose();
            if (_response != null)
                _response.Dispose();
            if (_client != null)
                _client.Dispose();
        }
    }



}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108
#pragma warning restore 3016
#pragma warning restore 8603



namespace BeeRock.Core.M4dzhfiw5nzoControllerNS
{

	public static class RedirectCalls
	{
		static System.Reflection.MethodInfo method = System.Reflection.Assembly
                .GetEntryAssembly()
                .GetType("BeeRock.Program")
                .GetMethod("GetRequestHandler")
                .Invoke(null,null) as System.Reflection.MethodInfo;

        static System.Reflection.MethodInfo methodForFile = System.Reflection.Assembly
                .GetEntryAssembly()
                .GetType("BeeRock.Program")
                .GetMethod("GetRequestHandlerForFile")
                .Invoke(null,null) as System.Reflection.MethodInfo;

        public static System.Collections.Generic.Dictionary<string, object> CreateParameter(string[] keys, object[] values) {
            var dict = new System.Collections.Generic.Dictionary<string, object>();
            for (int i = 0; i < keys.Length; i++) {
                dict.Add(keys[i], values[i]);
            }

            return dict;
        }

	    public static string HandleWithResponse(string methodName, System.Collections.Generic.Dictionary<string, object> parameters) {

       	    var r = method.Invoke(null, new object[] {methodName, parameters} );
            return r != null ? r.ToString() :  "";

		}

        public static Microsoft.AspNetCore.Mvc.FileContentResult HandleWithFileResponse(string methodName, System.Collections.Generic.Dictionary<string, object> parameters) {

       	    var r = methodForFile.Invoke(null, new object[] {methodName, parameters} );
            return r as Microsoft.AspNetCore.Mvc.FileContentResult;

		}
	}
}
