using BeeRock.Core.Entities.Middlewares;
using BeeRock.Core.Interfaces;
using BeeRock.Core.Utils;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.HttpLogging;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.OpenApi.Models;

namespace BeeRock.Core.Entities.Hosting;

public class RestApiStartup : IStartup {
    public IConfiguration Configuration { get; private set; }
    public Type[] TargetControllers { get; init; }

    public IStartup Setup(IConfiguration configuration) {
        Configuration = configuration;
        return this;
    }

    public string ServiceName { get; init; }

    public void Configure(IApplicationBuilder app) {
        // app.UseDeveloperExceptionPage();
        app.UseSwagger();
        app.UseSwaggerUI();

        app.ConfigureReqRespTracing();
        app.ConfigureExceptionHandler();
        app.UseHttpsRedirection();
        app.UseRouting();
        app.UseHttpLogging();
        app.CheckForPassThroughResponses();
        app.UseCors();
        app.UseAuthorization();

        app.UseEndpoints(endpoints => { endpoints.MapControllers(); });
    }

    // This method gets called by the runtime. Use this method to add services to the container.
    public void ConfigureServices(IServiceCollection services) {
        Requires.NotNullOrEmpty(services, nameof(services));
        Requires.NotNullOrEmpty(TargetControllers, nameof(TargetControllers));

        services.AddCors(options => {
            options.AddDefaultPolicy(policy => {
                policy.AllowAnyHeader();
                policy.AllowAnyMethod();
                policy.AllowCredentials();
                policy.SetIsOriginAllowed(o => true); //allows all origins everything
            });
        });
        services.AddHttpLogging(l => { l.LoggingFields = HttpLoggingFields.All; });

        //start only the specific controller
        services.AddMvcCore().UseSpecificControllers(TargetControllers);
        services.AddControllers();

        services.AddSwaggerGen(opt => {
            opt.SwaggerDoc("v1", new OpenApiInfo {
                Version = "v1",
                Title = ServiceName,
                Description = "Mock Service generated by BeeRock"
            });

            opt.SchemaFilter<XEnumNamesSchemaFilter>();
        });
    }
}
